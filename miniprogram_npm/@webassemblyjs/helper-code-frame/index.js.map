{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.codeFrameFromAst = codeFrameFromAst;\nexports.codeFrameFromSource = codeFrameFromSource;\n\nvar _wastPrinter = require(\"@webassemblyjs/wast-printer\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nvar SHOW_LINES_AROUND_POINTER = 5;\n\nfunction repeat(char, nb) {\n  return Array(nb).fill(char).join(\"\");\n} // TODO(sven): allow arbitrary ast nodes\n\n\nfunction codeFrameFromAst(ast, loc) {\n  return codeFrameFromSource((0, _wastPrinter.print)(ast), loc);\n}\n\nfunction codeFrameFromSource(source, loc) {\n  var start = loc.start,\n      end = loc.end;\n  var length = 1;\n\n  if (_typeof(end) === \"object\") {\n    length = end.column - start.column + 1;\n  }\n\n  return source.split(\"\\n\").reduce(function (acc, line, lineNbr) {\n    if (Math.abs(start.line - lineNbr) < SHOW_LINES_AROUND_POINTER) {\n      acc += line + \"\\n\";\n    } // Add a new line with the pointer padded left\n\n\n    if (lineNbr === start.line - 1) {\n      acc += repeat(\" \", start.column - 1);\n      acc += repeat(\"^\", length);\n      acc += \"\\n\";\n    }\n\n    return acc;\n  }, \"\");\n}"]}