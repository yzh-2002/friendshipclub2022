{"version":3,"sources":["index.js","nodes.js","node-helpers.js","traverse.js","node-path.js","signatures.js","utils.js","clone.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AENA;AHUA,AENA,AENA,AHSA,AIZA,AFMA;AHUA,AENA,AENA,AHSA,AIZA,AFMA;AHUA,AENA,AENA,AHSA,AIZA,AFMA;AHUA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ACFA,APqBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AENA,AENA,AHSA,AIZA,AFMA,AGTA;ANmBA,AIZA,AHSA,AIZA,AFMA,AGTA;ANmBA,AIZA,AHSA,AIZA,ACHA;ANmBA,AIZA,AHSA,AIZA,ACHA;ANmBA,AIZA,AHSA,AIZA,ACHA;ANmgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AIZA,ACHA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  numberLiteralFromRaw: true,\n  withLoc: true,\n  withRaw: true,\n  funcParam: true,\n  indexLiteral: true,\n  memIndexLiteral: true,\n  instruction: true,\n  objectInstruction: true,\n  traverse: true,\n  signatures: true,\n  cloneNode: true\n};\nObject.defineProperty(exports, \"numberLiteralFromRaw\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.numberLiteralFromRaw;\n  }\n});\nObject.defineProperty(exports, \"withLoc\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.withLoc;\n  }\n});\nObject.defineProperty(exports, \"withRaw\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.withRaw;\n  }\n});\nObject.defineProperty(exports, \"funcParam\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.funcParam;\n  }\n});\nObject.defineProperty(exports, \"indexLiteral\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.indexLiteral;\n  }\n});\nObject.defineProperty(exports, \"memIndexLiteral\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.memIndexLiteral;\n  }\n});\nObject.defineProperty(exports, \"instruction\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.instruction;\n  }\n});\nObject.defineProperty(exports, \"objectInstruction\", {\n  enumerable: true,\n  get: function get() {\n    return _nodeHelpers.objectInstruction;\n  }\n});\nObject.defineProperty(exports, \"traverse\", {\n  enumerable: true,\n  get: function get() {\n    return _traverse.traverse;\n  }\n});\nObject.defineProperty(exports, \"signatures\", {\n  enumerable: true,\n  get: function get() {\n    return _signatures.signatures;\n  }\n});\nObject.defineProperty(exports, \"cloneNode\", {\n  enumerable: true,\n  get: function get() {\n    return _clone.cloneNode;\n  }\n});\n\nvar _nodes = require(\"./nodes\");\n\nObject.keys(_nodes).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _nodes[key];\n    }\n  });\n});\n\nvar _nodeHelpers = require(\"./node-helpers.js\");\n\nvar _traverse = require(\"./traverse\");\n\nvar _signatures = require(\"./signatures\");\n\nvar _utils = require(\"./utils\");\n\nObject.keys(_utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _utils[key];\n    }\n  });\n});\n\nvar _clone = require(\"./clone\");","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.module = _module;\nexports.moduleMetadata = moduleMetadata;\nexports.moduleNameMetadata = moduleNameMetadata;\nexports.functionNameMetadata = functionNameMetadata;\nexports.localNameMetadata = localNameMetadata;\nexports.binaryModule = binaryModule;\nexports.quoteModule = quoteModule;\nexports.sectionMetadata = sectionMetadata;\nexports.producersSectionMetadata = producersSectionMetadata;\nexports.producerMetadata = producerMetadata;\nexports.producerMetadataVersionedName = producerMetadataVersionedName;\nexports.loopInstruction = loopInstruction;\nexports.instr = instr;\nexports.ifInstruction = ifInstruction;\nexports.stringLiteral = stringLiteral;\nexports.numberLiteral = numberLiteral;\nexports.longNumberLiteral = longNumberLiteral;\nexports.floatLiteral = floatLiteral;\nexports.elem = elem;\nexports.indexInFuncSection = indexInFuncSection;\nexports.valtypeLiteral = valtypeLiteral;\nexports.typeInstruction = typeInstruction;\nexports.start = start;\nexports.globalType = globalType;\nexports.leadingComment = leadingComment;\nexports.blockComment = blockComment;\nexports.data = data;\nexports.global = global;\nexports.table = table;\nexports.memory = memory;\nexports.funcImportDescr = funcImportDescr;\nexports.moduleImport = moduleImport;\nexports.moduleExportDescr = moduleExportDescr;\nexports.moduleExport = moduleExport;\nexports.limit = limit;\nexports.signature = signature;\nexports.program = program;\nexports.identifier = identifier;\nexports.blockInstruction = blockInstruction;\nexports.callInstruction = callInstruction;\nexports.callIndirectInstruction = callIndirectInstruction;\nexports.byteArray = byteArray;\nexports.func = func;\nexports.internalBrUnless = internalBrUnless;\nexports.internalGoto = internalGoto;\nexports.internalCallExtern = internalCallExtern;\nexports.internalEndAndReturn = internalEndAndReturn;\nexports.assertInternalCallExtern = exports.assertInternalGoto = exports.assertInternalBrUnless = exports.assertFunc = exports.assertByteArray = exports.assertCallIndirectInstruction = exports.assertCallInstruction = exports.assertBlockInstruction = exports.assertIdentifier = exports.assertProgram = exports.assertSignature = exports.assertLimit = exports.assertModuleExport = exports.assertModuleExportDescr = exports.assertModuleImport = exports.assertFuncImportDescr = exports.assertMemory = exports.assertTable = exports.assertGlobal = exports.assertData = exports.assertBlockComment = exports.assertLeadingComment = exports.assertGlobalType = exports.assertStart = exports.assertTypeInstruction = exports.assertValtypeLiteral = exports.assertIndexInFuncSection = exports.assertElem = exports.assertFloatLiteral = exports.assertLongNumberLiteral = exports.assertNumberLiteral = exports.assertStringLiteral = exports.assertIfInstruction = exports.assertInstr = exports.assertLoopInstruction = exports.assertProducerMetadataVersionedName = exports.assertProducerMetadata = exports.assertProducersSectionMetadata = exports.assertSectionMetadata = exports.assertQuoteModule = exports.assertBinaryModule = exports.assertLocalNameMetadata = exports.assertFunctionNameMetadata = exports.assertModuleNameMetadata = exports.assertModuleMetadata = exports.assertModule = exports.isIntrinsic = exports.isImportDescr = exports.isNumericLiteral = exports.isExpression = exports.isInstruction = exports.isBlock = exports.isNode = exports.isInternalEndAndReturn = exports.isInternalCallExtern = exports.isInternalGoto = exports.isInternalBrUnless = exports.isFunc = exports.isByteArray = exports.isCallIndirectInstruction = exports.isCallInstruction = exports.isBlockInstruction = exports.isIdentifier = exports.isProgram = exports.isSignature = exports.isLimit = exports.isModuleExport = exports.isModuleExportDescr = exports.isModuleImport = exports.isFuncImportDescr = exports.isMemory = exports.isTable = exports.isGlobal = exports.isData = exports.isBlockComment = exports.isLeadingComment = exports.isGlobalType = exports.isStart = exports.isTypeInstruction = exports.isValtypeLiteral = exports.isIndexInFuncSection = exports.isElem = exports.isFloatLiteral = exports.isLongNumberLiteral = exports.isNumberLiteral = exports.isStringLiteral = exports.isIfInstruction = exports.isInstr = exports.isLoopInstruction = exports.isProducerMetadataVersionedName = exports.isProducerMetadata = exports.isProducersSectionMetadata = exports.isSectionMetadata = exports.isQuoteModule = exports.isBinaryModule = exports.isLocalNameMetadata = exports.isFunctionNameMetadata = exports.isModuleNameMetadata = exports.isModuleMetadata = exports.isModule = void 0;\nexports.nodeAndUnionTypes = exports.unionTypesMap = exports.assertInternalEndAndReturn = void 0;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// THIS FILE IS AUTOGENERATED\n// see scripts/generateNodeUtils.js\nfunction isTypeOf(t) {\n  return function (n) {\n    return n.type === t;\n  };\n}\n\nfunction assertTypeOf(t) {\n  return function (n) {\n    return function () {\n      if (!(n.type === t)) {\n        throw new Error('n.type === t' + \" error: \" + (undefined || \"unknown\"));\n      }\n    }();\n  };\n}\n\nfunction _module(id, fields, metadata) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(fields) === \"object\" && typeof fields.length !== \"undefined\")) {\n    throw new Error('typeof fields === \"object\" && typeof fields.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Module\",\n    id: id,\n    fields: fields\n  };\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction moduleMetadata(sections, functionNames, localNames, producers) {\n  if (!(_typeof(sections) === \"object\" && typeof sections.length !== \"undefined\")) {\n    throw new Error('typeof sections === \"object\" && typeof sections.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (functionNames !== null && functionNames !== undefined) {\n    if (!(_typeof(functionNames) === \"object\" && typeof functionNames.length !== \"undefined\")) {\n      throw new Error('typeof functionNames === \"object\" && typeof functionNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (localNames !== null && localNames !== undefined) {\n    if (!(_typeof(localNames) === \"object\" && typeof localNames.length !== \"undefined\")) {\n      throw new Error('typeof localNames === \"object\" && typeof localNames.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  if (producers !== null && producers !== undefined) {\n    if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n      throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"ModuleMetadata\",\n    sections: sections\n  };\n\n  if (typeof functionNames !== \"undefined\" && functionNames.length > 0) {\n    node.functionNames = functionNames;\n  }\n\n  if (typeof localNames !== \"undefined\" && localNames.length > 0) {\n    node.localNames = localNames;\n  }\n\n  if (typeof producers !== \"undefined\" && producers.length > 0) {\n    node.producers = producers;\n  }\n\n  return node;\n}\n\nfunction moduleNameMetadata(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleNameMetadata\",\n    value: value\n  };\n  return node;\n}\n\nfunction functionNameMetadata(value, index) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof index === \"number\")) {\n    throw new Error('typeof index === \"number\"' + \" error: \" + (\"Argument index must be of type number, given: \" + _typeof(index) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FunctionNameMetadata\",\n    value: value,\n    index: index\n  };\n  return node;\n}\n\nfunction localNameMetadata(value, localIndex, functionIndex) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof localIndex === \"number\")) {\n    throw new Error('typeof localIndex === \"number\"' + \" error: \" + (\"Argument localIndex must be of type number, given: \" + _typeof(localIndex) || \"unknown\"));\n  }\n\n  if (!(typeof functionIndex === \"number\")) {\n    throw new Error('typeof functionIndex === \"number\"' + \" error: \" + (\"Argument functionIndex must be of type number, given: \" + _typeof(functionIndex) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LocalNameMetadata\",\n    value: value,\n    localIndex: localIndex,\n    functionIndex: functionIndex\n  };\n  return node;\n}\n\nfunction binaryModule(id, blob) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(blob) === \"object\" && typeof blob.length !== \"undefined\")) {\n    throw new Error('typeof blob === \"object\" && typeof blob.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BinaryModule\",\n    id: id,\n    blob: blob\n  };\n  return node;\n}\n\nfunction quoteModule(id, string) {\n  if (id !== null && id !== undefined) {\n    if (!(typeof id === \"string\")) {\n      throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n    }\n  }\n\n  if (!(_typeof(string) === \"object\" && typeof string.length !== \"undefined\")) {\n    throw new Error('typeof string === \"object\" && typeof string.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"QuoteModule\",\n    id: id,\n    string: string\n  };\n  return node;\n}\n\nfunction sectionMetadata(section, startOffset, size, vectorOfSize) {\n  if (!(typeof startOffset === \"number\")) {\n    throw new Error('typeof startOffset === \"number\"' + \" error: \" + (\"Argument startOffset must be of type number, given: \" + _typeof(startOffset) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"SectionMetadata\",\n    section: section,\n    startOffset: startOffset,\n    size: size,\n    vectorOfSize: vectorOfSize\n  };\n  return node;\n}\n\nfunction producersSectionMetadata(producers) {\n  if (!(_typeof(producers) === \"object\" && typeof producers.length !== \"undefined\")) {\n    throw new Error('typeof producers === \"object\" && typeof producers.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducersSectionMetadata\",\n    producers: producers\n  };\n  return node;\n}\n\nfunction producerMetadata(language, processedBy, sdk) {\n  if (!(_typeof(language) === \"object\" && typeof language.length !== \"undefined\")) {\n    throw new Error('typeof language === \"object\" && typeof language.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(processedBy) === \"object\" && typeof processedBy.length !== \"undefined\")) {\n    throw new Error('typeof processedBy === \"object\" && typeof processedBy.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(sdk) === \"object\" && typeof sdk.length !== \"undefined\")) {\n    throw new Error('typeof sdk === \"object\" && typeof sdk.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadata\",\n    language: language,\n    processedBy: processedBy,\n    sdk: sdk\n  };\n  return node;\n}\n\nfunction producerMetadataVersionedName(name, version) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  if (!(typeof version === \"string\")) {\n    throw new Error('typeof version === \"string\"' + \" error: \" + (\"Argument version must be of type string, given: \" + _typeof(version) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ProducerMetadataVersionedName\",\n    name: name,\n    version: version\n  };\n  return node;\n}\n\nfunction loopInstruction(label, resulttype, instr) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LoopInstruction\",\n    id: \"loop\",\n    label: label,\n    resulttype: resulttype,\n    instr: instr\n  };\n  return node;\n}\n\nfunction instr(id, object, args, namedArgs) {\n  if (!(typeof id === \"string\")) {\n    throw new Error('typeof id === \"string\"' + \" error: \" + (\"Argument id must be of type string, given: \" + _typeof(id) || \"unknown\"));\n  }\n\n  if (!(_typeof(args) === \"object\" && typeof args.length !== \"undefined\")) {\n    throw new Error('typeof args === \"object\" && typeof args.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Instr\",\n    id: id,\n    args: args\n  };\n\n  if (typeof object !== \"undefined\") {\n    node.object = object;\n  }\n\n  if (typeof namedArgs !== \"undefined\" && Object.keys(namedArgs).length !== 0) {\n    node.namedArgs = namedArgs;\n  }\n\n  return node;\n}\n\nfunction ifInstruction(testLabel, test, result, consequent, alternate) {\n  if (!(_typeof(test) === \"object\" && typeof test.length !== \"undefined\")) {\n    throw new Error('typeof test === \"object\" && typeof test.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(consequent) === \"object\" && typeof consequent.length !== \"undefined\")) {\n    throw new Error('typeof consequent === \"object\" && typeof consequent.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(alternate) === \"object\" && typeof alternate.length !== \"undefined\")) {\n    throw new Error('typeof alternate === \"object\" && typeof alternate.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"IfInstruction\",\n    id: \"if\",\n    testLabel: testLabel,\n    test: test,\n    result: result,\n    consequent: consequent,\n    alternate: alternate\n  };\n  return node;\n}\n\nfunction stringLiteral(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"StringLiteral\",\n    value: value\n  };\n  return node;\n}\n\nfunction numberLiteral(value, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"NumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction longNumberLiteral(value, raw) {\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LongNumberLiteral\",\n    value: value,\n    raw: raw\n  };\n  return node;\n}\n\nfunction floatLiteral(value, nan, inf, raw) {\n  if (!(typeof value === \"number\")) {\n    throw new Error('typeof value === \"number\"' + \" error: \" + (\"Argument value must be of type number, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (nan !== null && nan !== undefined) {\n    if (!(typeof nan === \"boolean\")) {\n      throw new Error('typeof nan === \"boolean\"' + \" error: \" + (\"Argument nan must be of type boolean, given: \" + _typeof(nan) || \"unknown\"));\n    }\n  }\n\n  if (inf !== null && inf !== undefined) {\n    if (!(typeof inf === \"boolean\")) {\n      throw new Error('typeof inf === \"boolean\"' + \" error: \" + (\"Argument inf must be of type boolean, given: \" + _typeof(inf) || \"unknown\"));\n    }\n  }\n\n  if (!(typeof raw === \"string\")) {\n    throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"FloatLiteral\",\n    value: value,\n    raw: raw\n  };\n\n  if (nan === true) {\n    node.nan = true;\n  }\n\n  if (inf === true) {\n    node.inf = true;\n  }\n\n  return node;\n}\n\nfunction elem(table, offset, funcs) {\n  if (!(_typeof(offset) === \"object\" && typeof offset.length !== \"undefined\")) {\n    throw new Error('typeof offset === \"object\" && typeof offset.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(funcs) === \"object\" && typeof funcs.length !== \"undefined\")) {\n    throw new Error('typeof funcs === \"object\" && typeof funcs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Elem\",\n    table: table,\n    offset: offset,\n    funcs: funcs\n  };\n  return node;\n}\n\nfunction indexInFuncSection(index) {\n  var node = {\n    type: \"IndexInFuncSection\",\n    index: index\n  };\n  return node;\n}\n\nfunction valtypeLiteral(name) {\n  var node = {\n    type: \"ValtypeLiteral\",\n    name: name\n  };\n  return node;\n}\n\nfunction typeInstruction(id, functype) {\n  var node = {\n    type: \"TypeInstruction\",\n    id: id,\n    functype: functype\n  };\n  return node;\n}\n\nfunction start(index) {\n  var node = {\n    type: \"Start\",\n    index: index\n  };\n  return node;\n}\n\nfunction globalType(valtype, mutability) {\n  var node = {\n    type: \"GlobalType\",\n    valtype: valtype,\n    mutability: mutability\n  };\n  return node;\n}\n\nfunction leadingComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"LeadingComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction blockComment(value) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockComment\",\n    value: value\n  };\n  return node;\n}\n\nfunction data(memoryIndex, offset, init) {\n  var node = {\n    type: \"Data\",\n    memoryIndex: memoryIndex,\n    offset: offset,\n    init: init\n  };\n  return node;\n}\n\nfunction global(globalType, init, name) {\n  if (!(_typeof(init) === \"object\" && typeof init.length !== \"undefined\")) {\n    throw new Error('typeof init === \"object\" && typeof init.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Global\",\n    globalType: globalType,\n    init: init,\n    name: name\n  };\n  return node;\n}\n\nfunction table(elementType, limits, name, elements) {\n  if (!(limits.type === \"Limit\")) {\n    throw new Error('limits.type === \"Limit\"' + \" error: \" + (\"Argument limits must be of type Limit, given: \" + limits.type || \"unknown\"));\n  }\n\n  if (elements !== null && elements !== undefined) {\n    if (!(_typeof(elements) === \"object\" && typeof elements.length !== \"undefined\")) {\n      throw new Error('typeof elements === \"object\" && typeof elements.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Table\",\n    elementType: elementType,\n    limits: limits,\n    name: name\n  };\n\n  if (typeof elements !== \"undefined\" && elements.length > 0) {\n    node.elements = elements;\n  }\n\n  return node;\n}\n\nfunction memory(limits, id) {\n  var node = {\n    type: \"Memory\",\n    limits: limits,\n    id: id\n  };\n  return node;\n}\n\nfunction funcImportDescr(id, signature) {\n  var node = {\n    type: \"FuncImportDescr\",\n    id: id,\n    signature: signature\n  };\n  return node;\n}\n\nfunction moduleImport(module, name, descr) {\n  if (!(typeof module === \"string\")) {\n    throw new Error('typeof module === \"string\"' + \" error: \" + (\"Argument module must be of type string, given: \" + _typeof(module) || \"unknown\"));\n  }\n\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleImport\",\n    module: module,\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction moduleExportDescr(exportType, id) {\n  var node = {\n    type: \"ModuleExportDescr\",\n    exportType: exportType,\n    id: id\n  };\n  return node;\n}\n\nfunction moduleExport(name, descr) {\n  if (!(typeof name === \"string\")) {\n    throw new Error('typeof name === \"string\"' + \" error: \" + (\"Argument name must be of type string, given: \" + _typeof(name) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ModuleExport\",\n    name: name,\n    descr: descr\n  };\n  return node;\n}\n\nfunction limit(min, max) {\n  if (!(typeof min === \"number\")) {\n    throw new Error('typeof min === \"number\"' + \" error: \" + (\"Argument min must be of type number, given: \" + _typeof(min) || \"unknown\"));\n  }\n\n  if (max !== null && max !== undefined) {\n    if (!(typeof max === \"number\")) {\n      throw new Error('typeof max === \"number\"' + \" error: \" + (\"Argument max must be of type number, given: \" + _typeof(max) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Limit\",\n    min: min\n  };\n\n  if (typeof max !== \"undefined\") {\n    node.max = max;\n  }\n\n  return node;\n}\n\nfunction signature(params, results) {\n  if (!(_typeof(params) === \"object\" && typeof params.length !== \"undefined\")) {\n    throw new Error('typeof params === \"object\" && typeof params.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (!(_typeof(results) === \"object\" && typeof results.length !== \"undefined\")) {\n    throw new Error('typeof results === \"object\" && typeof results.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Signature\",\n    params: params,\n    results: results\n  };\n  return node;\n}\n\nfunction program(body) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"Program\",\n    body: body\n  };\n  return node;\n}\n\nfunction identifier(value, raw) {\n  if (!(typeof value === \"string\")) {\n    throw new Error('typeof value === \"string\"' + \" error: \" + (\"Argument value must be of type string, given: \" + _typeof(value) || \"unknown\"));\n  }\n\n  if (raw !== null && raw !== undefined) {\n    if (!(typeof raw === \"string\")) {\n      throw new Error('typeof raw === \"string\"' + \" error: \" + (\"Argument raw must be of type string, given: \" + _typeof(raw) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Identifier\",\n    value: value\n  };\n\n  if (typeof raw !== \"undefined\") {\n    node.raw = raw;\n  }\n\n  return node;\n}\n\nfunction blockInstruction(label, instr, result) {\n  if (!(_typeof(instr) === \"object\" && typeof instr.length !== \"undefined\")) {\n    throw new Error('typeof instr === \"object\" && typeof instr.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"BlockInstruction\",\n    id: \"block\",\n    label: label,\n    instr: instr,\n    result: result\n  };\n  return node;\n}\n\nfunction callInstruction(index, instrArgs, numeric) {\n  if (instrArgs !== null && instrArgs !== undefined) {\n    if (!(_typeof(instrArgs) === \"object\" && typeof instrArgs.length !== \"undefined\")) {\n      throw new Error('typeof instrArgs === \"object\" && typeof instrArgs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallInstruction\",\n    id: \"call\",\n    index: index\n  };\n\n  if (typeof instrArgs !== \"undefined\" && instrArgs.length > 0) {\n    node.instrArgs = instrArgs;\n  }\n\n  if (typeof numeric !== \"undefined\") {\n    node.numeric = numeric;\n  }\n\n  return node;\n}\n\nfunction callIndirectInstruction(signature, intrs) {\n  if (intrs !== null && intrs !== undefined) {\n    if (!(_typeof(intrs) === \"object\" && typeof intrs.length !== \"undefined\")) {\n      throw new Error('typeof intrs === \"object\" && typeof intrs.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"CallIndirectInstruction\",\n    id: \"call_indirect\",\n    signature: signature\n  };\n\n  if (typeof intrs !== \"undefined\" && intrs.length > 0) {\n    node.intrs = intrs;\n  }\n\n  return node;\n}\n\nfunction byteArray(values) {\n  if (!(_typeof(values) === \"object\" && typeof values.length !== \"undefined\")) {\n    throw new Error('typeof values === \"object\" && typeof values.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var node = {\n    type: \"ByteArray\",\n    values: values\n  };\n  return node;\n}\n\nfunction func(name, signature, body, isExternal, metadata) {\n  if (!(_typeof(body) === \"object\" && typeof body.length !== \"undefined\")) {\n    throw new Error('typeof body === \"object\" && typeof body.length !== \"undefined\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  if (isExternal !== null && isExternal !== undefined) {\n    if (!(typeof isExternal === \"boolean\")) {\n      throw new Error('typeof isExternal === \"boolean\"' + \" error: \" + (\"Argument isExternal must be of type boolean, given: \" + _typeof(isExternal) || \"unknown\"));\n    }\n  }\n\n  var node = {\n    type: \"Func\",\n    name: name,\n    signature: signature,\n    body: body\n  };\n\n  if (isExternal === true) {\n    node.isExternal = true;\n  }\n\n  if (typeof metadata !== \"undefined\") {\n    node.metadata = metadata;\n  }\n\n  return node;\n}\n\nfunction internalBrUnless(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalBrUnless\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalGoto(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalGoto\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalCallExtern(target) {\n  if (!(typeof target === \"number\")) {\n    throw new Error('typeof target === \"number\"' + \" error: \" + (\"Argument target must be of type number, given: \" + _typeof(target) || \"unknown\"));\n  }\n\n  var node = {\n    type: \"InternalCallExtern\",\n    target: target\n  };\n  return node;\n}\n\nfunction internalEndAndReturn() {\n  var node = {\n    type: \"InternalEndAndReturn\"\n  };\n  return node;\n}\n\nvar isModule = isTypeOf(\"Module\");\nexports.isModule = isModule;\nvar isModuleMetadata = isTypeOf(\"ModuleMetadata\");\nexports.isModuleMetadata = isModuleMetadata;\nvar isModuleNameMetadata = isTypeOf(\"ModuleNameMetadata\");\nexports.isModuleNameMetadata = isModuleNameMetadata;\nvar isFunctionNameMetadata = isTypeOf(\"FunctionNameMetadata\");\nexports.isFunctionNameMetadata = isFunctionNameMetadata;\nvar isLocalNameMetadata = isTypeOf(\"LocalNameMetadata\");\nexports.isLocalNameMetadata = isLocalNameMetadata;\nvar isBinaryModule = isTypeOf(\"BinaryModule\");\nexports.isBinaryModule = isBinaryModule;\nvar isQuoteModule = isTypeOf(\"QuoteModule\");\nexports.isQuoteModule = isQuoteModule;\nvar isSectionMetadata = isTypeOf(\"SectionMetadata\");\nexports.isSectionMetadata = isSectionMetadata;\nvar isProducersSectionMetadata = isTypeOf(\"ProducersSectionMetadata\");\nexports.isProducersSectionMetadata = isProducersSectionMetadata;\nvar isProducerMetadata = isTypeOf(\"ProducerMetadata\");\nexports.isProducerMetadata = isProducerMetadata;\nvar isProducerMetadataVersionedName = isTypeOf(\"ProducerMetadataVersionedName\");\nexports.isProducerMetadataVersionedName = isProducerMetadataVersionedName;\nvar isLoopInstruction = isTypeOf(\"LoopInstruction\");\nexports.isLoopInstruction = isLoopInstruction;\nvar isInstr = isTypeOf(\"Instr\");\nexports.isInstr = isInstr;\nvar isIfInstruction = isTypeOf(\"IfInstruction\");\nexports.isIfInstruction = isIfInstruction;\nvar isStringLiteral = isTypeOf(\"StringLiteral\");\nexports.isStringLiteral = isStringLiteral;\nvar isNumberLiteral = isTypeOf(\"NumberLiteral\");\nexports.isNumberLiteral = isNumberLiteral;\nvar isLongNumberLiteral = isTypeOf(\"LongNumberLiteral\");\nexports.isLongNumberLiteral = isLongNumberLiteral;\nvar isFloatLiteral = isTypeOf(\"FloatLiteral\");\nexports.isFloatLiteral = isFloatLiteral;\nvar isElem = isTypeOf(\"Elem\");\nexports.isElem = isElem;\nvar isIndexInFuncSection = isTypeOf(\"IndexInFuncSection\");\nexports.isIndexInFuncSection = isIndexInFuncSection;\nvar isValtypeLiteral = isTypeOf(\"ValtypeLiteral\");\nexports.isValtypeLiteral = isValtypeLiteral;\nvar isTypeInstruction = isTypeOf(\"TypeInstruction\");\nexports.isTypeInstruction = isTypeInstruction;\nvar isStart = isTypeOf(\"Start\");\nexports.isStart = isStart;\nvar isGlobalType = isTypeOf(\"GlobalType\");\nexports.isGlobalType = isGlobalType;\nvar isLeadingComment = isTypeOf(\"LeadingComment\");\nexports.isLeadingComment = isLeadingComment;\nvar isBlockComment = isTypeOf(\"BlockComment\");\nexports.isBlockComment = isBlockComment;\nvar isData = isTypeOf(\"Data\");\nexports.isData = isData;\nvar isGlobal = isTypeOf(\"Global\");\nexports.isGlobal = isGlobal;\nvar isTable = isTypeOf(\"Table\");\nexports.isTable = isTable;\nvar isMemory = isTypeOf(\"Memory\");\nexports.isMemory = isMemory;\nvar isFuncImportDescr = isTypeOf(\"FuncImportDescr\");\nexports.isFuncImportDescr = isFuncImportDescr;\nvar isModuleImport = isTypeOf(\"ModuleImport\");\nexports.isModuleImport = isModuleImport;\nvar isModuleExportDescr = isTypeOf(\"ModuleExportDescr\");\nexports.isModuleExportDescr = isModuleExportDescr;\nvar isModuleExport = isTypeOf(\"ModuleExport\");\nexports.isModuleExport = isModuleExport;\nvar isLimit = isTypeOf(\"Limit\");\nexports.isLimit = isLimit;\nvar isSignature = isTypeOf(\"Signature\");\nexports.isSignature = isSignature;\nvar isProgram = isTypeOf(\"Program\");\nexports.isProgram = isProgram;\nvar isIdentifier = isTypeOf(\"Identifier\");\nexports.isIdentifier = isIdentifier;\nvar isBlockInstruction = isTypeOf(\"BlockInstruction\");\nexports.isBlockInstruction = isBlockInstruction;\nvar isCallInstruction = isTypeOf(\"CallInstruction\");\nexports.isCallInstruction = isCallInstruction;\nvar isCallIndirectInstruction = isTypeOf(\"CallIndirectInstruction\");\nexports.isCallIndirectInstruction = isCallIndirectInstruction;\nvar isByteArray = isTypeOf(\"ByteArray\");\nexports.isByteArray = isByteArray;\nvar isFunc = isTypeOf(\"Func\");\nexports.isFunc = isFunc;\nvar isInternalBrUnless = isTypeOf(\"InternalBrUnless\");\nexports.isInternalBrUnless = isInternalBrUnless;\nvar isInternalGoto = isTypeOf(\"InternalGoto\");\nexports.isInternalGoto = isInternalGoto;\nvar isInternalCallExtern = isTypeOf(\"InternalCallExtern\");\nexports.isInternalCallExtern = isInternalCallExtern;\nvar isInternalEndAndReturn = isTypeOf(\"InternalEndAndReturn\");\nexports.isInternalEndAndReturn = isInternalEndAndReturn;\n\nvar isNode = function isNode(node) {\n  return isModule(node) || isModuleMetadata(node) || isModuleNameMetadata(node) || isFunctionNameMetadata(node) || isLocalNameMetadata(node) || isBinaryModule(node) || isQuoteModule(node) || isSectionMetadata(node) || isProducersSectionMetadata(node) || isProducerMetadata(node) || isProducerMetadataVersionedName(node) || isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isElem(node) || isIndexInFuncSection(node) || isValtypeLiteral(node) || isTypeInstruction(node) || isStart(node) || isGlobalType(node) || isLeadingComment(node) || isBlockComment(node) || isData(node) || isGlobal(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node) || isModuleImport(node) || isModuleExportDescr(node) || isModuleExport(node) || isLimit(node) || isSignature(node) || isProgram(node) || isIdentifier(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node) || isByteArray(node) || isFunc(node) || isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isNode = isNode;\n\nvar isBlock = function isBlock(node) {\n  return isLoopInstruction(node) || isBlockInstruction(node) || isFunc(node);\n};\n\nexports.isBlock = isBlock;\n\nvar isInstruction = function isInstruction(node) {\n  return isLoopInstruction(node) || isInstr(node) || isIfInstruction(node) || isTypeInstruction(node) || isBlockInstruction(node) || isCallInstruction(node) || isCallIndirectInstruction(node);\n};\n\nexports.isInstruction = isInstruction;\n\nvar isExpression = function isExpression(node) {\n  return isInstr(node) || isStringLiteral(node) || isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node) || isValtypeLiteral(node) || isIdentifier(node);\n};\n\nexports.isExpression = isExpression;\n\nvar isNumericLiteral = function isNumericLiteral(node) {\n  return isNumberLiteral(node) || isLongNumberLiteral(node) || isFloatLiteral(node);\n};\n\nexports.isNumericLiteral = isNumericLiteral;\n\nvar isImportDescr = function isImportDescr(node) {\n  return isGlobalType(node) || isTable(node) || isMemory(node) || isFuncImportDescr(node);\n};\n\nexports.isImportDescr = isImportDescr;\n\nvar isIntrinsic = function isIntrinsic(node) {\n  return isInternalBrUnless(node) || isInternalGoto(node) || isInternalCallExtern(node) || isInternalEndAndReturn(node);\n};\n\nexports.isIntrinsic = isIntrinsic;\nvar assertModule = assertTypeOf(\"Module\");\nexports.assertModule = assertModule;\nvar assertModuleMetadata = assertTypeOf(\"ModuleMetadata\");\nexports.assertModuleMetadata = assertModuleMetadata;\nvar assertModuleNameMetadata = assertTypeOf(\"ModuleNameMetadata\");\nexports.assertModuleNameMetadata = assertModuleNameMetadata;\nvar assertFunctionNameMetadata = assertTypeOf(\"FunctionNameMetadata\");\nexports.assertFunctionNameMetadata = assertFunctionNameMetadata;\nvar assertLocalNameMetadata = assertTypeOf(\"LocalNameMetadata\");\nexports.assertLocalNameMetadata = assertLocalNameMetadata;\nvar assertBinaryModule = assertTypeOf(\"BinaryModule\");\nexports.assertBinaryModule = assertBinaryModule;\nvar assertQuoteModule = assertTypeOf(\"QuoteModule\");\nexports.assertQuoteModule = assertQuoteModule;\nvar assertSectionMetadata = assertTypeOf(\"SectionMetadata\");\nexports.assertSectionMetadata = assertSectionMetadata;\nvar assertProducersSectionMetadata = assertTypeOf(\"ProducersSectionMetadata\");\nexports.assertProducersSectionMetadata = assertProducersSectionMetadata;\nvar assertProducerMetadata = assertTypeOf(\"ProducerMetadata\");\nexports.assertProducerMetadata = assertProducerMetadata;\nvar assertProducerMetadataVersionedName = assertTypeOf(\"ProducerMetadataVersionedName\");\nexports.assertProducerMetadataVersionedName = assertProducerMetadataVersionedName;\nvar assertLoopInstruction = assertTypeOf(\"LoopInstruction\");\nexports.assertLoopInstruction = assertLoopInstruction;\nvar assertInstr = assertTypeOf(\"Instr\");\nexports.assertInstr = assertInstr;\nvar assertIfInstruction = assertTypeOf(\"IfInstruction\");\nexports.assertIfInstruction = assertIfInstruction;\nvar assertStringLiteral = assertTypeOf(\"StringLiteral\");\nexports.assertStringLiteral = assertStringLiteral;\nvar assertNumberLiteral = assertTypeOf(\"NumberLiteral\");\nexports.assertNumberLiteral = assertNumberLiteral;\nvar assertLongNumberLiteral = assertTypeOf(\"LongNumberLiteral\");\nexports.assertLongNumberLiteral = assertLongNumberLiteral;\nvar assertFloatLiteral = assertTypeOf(\"FloatLiteral\");\nexports.assertFloatLiteral = assertFloatLiteral;\nvar assertElem = assertTypeOf(\"Elem\");\nexports.assertElem = assertElem;\nvar assertIndexInFuncSection = assertTypeOf(\"IndexInFuncSection\");\nexports.assertIndexInFuncSection = assertIndexInFuncSection;\nvar assertValtypeLiteral = assertTypeOf(\"ValtypeLiteral\");\nexports.assertValtypeLiteral = assertValtypeLiteral;\nvar assertTypeInstruction = assertTypeOf(\"TypeInstruction\");\nexports.assertTypeInstruction = assertTypeInstruction;\nvar assertStart = assertTypeOf(\"Start\");\nexports.assertStart = assertStart;\nvar assertGlobalType = assertTypeOf(\"GlobalType\");\nexports.assertGlobalType = assertGlobalType;\nvar assertLeadingComment = assertTypeOf(\"LeadingComment\");\nexports.assertLeadingComment = assertLeadingComment;\nvar assertBlockComment = assertTypeOf(\"BlockComment\");\nexports.assertBlockComment = assertBlockComment;\nvar assertData = assertTypeOf(\"Data\");\nexports.assertData = assertData;\nvar assertGlobal = assertTypeOf(\"Global\");\nexports.assertGlobal = assertGlobal;\nvar assertTable = assertTypeOf(\"Table\");\nexports.assertTable = assertTable;\nvar assertMemory = assertTypeOf(\"Memory\");\nexports.assertMemory = assertMemory;\nvar assertFuncImportDescr = assertTypeOf(\"FuncImportDescr\");\nexports.assertFuncImportDescr = assertFuncImportDescr;\nvar assertModuleImport = assertTypeOf(\"ModuleImport\");\nexports.assertModuleImport = assertModuleImport;\nvar assertModuleExportDescr = assertTypeOf(\"ModuleExportDescr\");\nexports.assertModuleExportDescr = assertModuleExportDescr;\nvar assertModuleExport = assertTypeOf(\"ModuleExport\");\nexports.assertModuleExport = assertModuleExport;\nvar assertLimit = assertTypeOf(\"Limit\");\nexports.assertLimit = assertLimit;\nvar assertSignature = assertTypeOf(\"Signature\");\nexports.assertSignature = assertSignature;\nvar assertProgram = assertTypeOf(\"Program\");\nexports.assertProgram = assertProgram;\nvar assertIdentifier = assertTypeOf(\"Identifier\");\nexports.assertIdentifier = assertIdentifier;\nvar assertBlockInstruction = assertTypeOf(\"BlockInstruction\");\nexports.assertBlockInstruction = assertBlockInstruction;\nvar assertCallInstruction = assertTypeOf(\"CallInstruction\");\nexports.assertCallInstruction = assertCallInstruction;\nvar assertCallIndirectInstruction = assertTypeOf(\"CallIndirectInstruction\");\nexports.assertCallIndirectInstruction = assertCallIndirectInstruction;\nvar assertByteArray = assertTypeOf(\"ByteArray\");\nexports.assertByteArray = assertByteArray;\nvar assertFunc = assertTypeOf(\"Func\");\nexports.assertFunc = assertFunc;\nvar assertInternalBrUnless = assertTypeOf(\"InternalBrUnless\");\nexports.assertInternalBrUnless = assertInternalBrUnless;\nvar assertInternalGoto = assertTypeOf(\"InternalGoto\");\nexports.assertInternalGoto = assertInternalGoto;\nvar assertInternalCallExtern = assertTypeOf(\"InternalCallExtern\");\nexports.assertInternalCallExtern = assertInternalCallExtern;\nvar assertInternalEndAndReturn = assertTypeOf(\"InternalEndAndReturn\");\nexports.assertInternalEndAndReturn = assertInternalEndAndReturn;\nvar unionTypesMap = {\n  Module: [\"Node\"],\n  ModuleMetadata: [\"Node\"],\n  ModuleNameMetadata: [\"Node\"],\n  FunctionNameMetadata: [\"Node\"],\n  LocalNameMetadata: [\"Node\"],\n  BinaryModule: [\"Node\"],\n  QuoteModule: [\"Node\"],\n  SectionMetadata: [\"Node\"],\n  ProducersSectionMetadata: [\"Node\"],\n  ProducerMetadata: [\"Node\"],\n  ProducerMetadataVersionedName: [\"Node\"],\n  LoopInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  Instr: [\"Node\", \"Expression\", \"Instruction\"],\n  IfInstruction: [\"Node\", \"Instruction\"],\n  StringLiteral: [\"Node\", \"Expression\"],\n  NumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  LongNumberLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  FloatLiteral: [\"Node\", \"NumericLiteral\", \"Expression\"],\n  Elem: [\"Node\"],\n  IndexInFuncSection: [\"Node\"],\n  ValtypeLiteral: [\"Node\", \"Expression\"],\n  TypeInstruction: [\"Node\", \"Instruction\"],\n  Start: [\"Node\"],\n  GlobalType: [\"Node\", \"ImportDescr\"],\n  LeadingComment: [\"Node\"],\n  BlockComment: [\"Node\"],\n  Data: [\"Node\"],\n  Global: [\"Node\"],\n  Table: [\"Node\", \"ImportDescr\"],\n  Memory: [\"Node\", \"ImportDescr\"],\n  FuncImportDescr: [\"Node\", \"ImportDescr\"],\n  ModuleImport: [\"Node\"],\n  ModuleExportDescr: [\"Node\"],\n  ModuleExport: [\"Node\"],\n  Limit: [\"Node\"],\n  Signature: [\"Node\"],\n  Program: [\"Node\"],\n  Identifier: [\"Node\", \"Expression\"],\n  BlockInstruction: [\"Node\", \"Block\", \"Instruction\"],\n  CallInstruction: [\"Node\", \"Instruction\"],\n  CallIndirectInstruction: [\"Node\", \"Instruction\"],\n  ByteArray: [\"Node\"],\n  Func: [\"Node\", \"Block\"],\n  InternalBrUnless: [\"Node\", \"Intrinsic\"],\n  InternalGoto: [\"Node\", \"Intrinsic\"],\n  InternalCallExtern: [\"Node\", \"Intrinsic\"],\n  InternalEndAndReturn: [\"Node\", \"Intrinsic\"]\n};\nexports.unionTypesMap = unionTypesMap;\nvar nodeAndUnionTypes = [\"Module\", \"ModuleMetadata\", \"ModuleNameMetadata\", \"FunctionNameMetadata\", \"LocalNameMetadata\", \"BinaryModule\", \"QuoteModule\", \"SectionMetadata\", \"ProducersSectionMetadata\", \"ProducerMetadata\", \"ProducerMetadataVersionedName\", \"LoopInstruction\", \"Instr\", \"IfInstruction\", \"StringLiteral\", \"NumberLiteral\", \"LongNumberLiteral\", \"FloatLiteral\", \"Elem\", \"IndexInFuncSection\", \"ValtypeLiteral\", \"TypeInstruction\", \"Start\", \"GlobalType\", \"LeadingComment\", \"BlockComment\", \"Data\", \"Global\", \"Table\", \"Memory\", \"FuncImportDescr\", \"ModuleImport\", \"ModuleExportDescr\", \"ModuleExport\", \"Limit\", \"Signature\", \"Program\", \"Identifier\", \"BlockInstruction\", \"CallInstruction\", \"CallIndirectInstruction\", \"ByteArray\", \"Func\", \"InternalBrUnless\", \"InternalGoto\", \"InternalCallExtern\", \"InternalEndAndReturn\", \"Node\", \"Block\", \"Instruction\", \"Expression\", \"NumericLiteral\", \"ImportDescr\", \"Intrinsic\"];\nexports.nodeAndUnionTypes = nodeAndUnionTypes;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.numberLiteralFromRaw = numberLiteralFromRaw;\nexports.instruction = instruction;\nexports.objectInstruction = objectInstruction;\nexports.withLoc = withLoc;\nexports.withRaw = withRaw;\nexports.funcParam = funcParam;\nexports.indexLiteral = indexLiteral;\nexports.memIndexLiteral = memIndexLiteral;\n\nvar _wastParser = require(\"@webassemblyjs/wast-parser\");\n\nvar _nodes = require(\"./nodes\");\n\nfunction numberLiteralFromRaw(rawValue) {\n  var instructionType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"i32\";\n  var original = rawValue; // Remove numeric separators _\n\n  if (typeof rawValue === \"string\") {\n    rawValue = rawValue.replace(/_/g, \"\");\n  }\n\n  if (typeof rawValue === \"number\") {\n    return (0, _nodes.numberLiteral)(rawValue, String(original));\n  } else {\n    switch (instructionType) {\n      case \"i32\":\n        {\n          return (0, _nodes.numberLiteral)((0, _wastParser.parse32I)(rawValue), String(original));\n        }\n\n      case \"u32\":\n        {\n          return (0, _nodes.numberLiteral)((0, _wastParser.parseU32)(rawValue), String(original));\n        }\n\n      case \"i64\":\n        {\n          return (0, _nodes.longNumberLiteral)((0, _wastParser.parse64I)(rawValue), String(original));\n        }\n\n      case \"f32\":\n        {\n          return (0, _nodes.floatLiteral)((0, _wastParser.parse32F)(rawValue), (0, _wastParser.isNanLiteral)(rawValue), (0, _wastParser.isInfLiteral)(rawValue), String(original));\n        }\n      // f64\n\n      default:\n        {\n          return (0, _nodes.floatLiteral)((0, _wastParser.parse64F)(rawValue), (0, _wastParser.isNanLiteral)(rawValue), (0, _wastParser.isInfLiteral)(rawValue), String(original));\n        }\n    }\n  }\n}\n\nfunction instruction(id) {\n  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var namedArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return (0, _nodes.instr)(id, undefined, args, namedArgs);\n}\n\nfunction objectInstruction(id, object) {\n  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var namedArgs = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return (0, _nodes.instr)(id, object, args, namedArgs);\n}\n/**\n * Decorators\n */\n\n\nfunction withLoc(n, end, start) {\n  var loc = {\n    start: start,\n    end: end\n  };\n  n.loc = loc;\n  return n;\n}\n\nfunction withRaw(n, raw) {\n  n.raw = raw;\n  return n;\n}\n\nfunction funcParam(valtype, id) {\n  return {\n    id: id,\n    valtype: valtype\n  };\n}\n\nfunction indexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}\n\nfunction memIndexLiteral(value) {\n  // $FlowIgnore\n  var x = numberLiteralFromRaw(value, \"u32\");\n  return x;\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.traverse = traverse;\n\nvar _nodePath = require(\"./node-path\");\n\nvar _nodes = require(\"./nodes\");\n\n// recursively walks the AST starting at the given node. The callback is invoked for\n// and object that has a 'type' property.\nfunction walk(context, callback) {\n  var stop = false;\n\n  function innerWalk(context, callback) {\n    if (stop) {\n      return;\n    }\n\n    var node = context.node;\n\n    if (node === undefined) {\n      console.warn(\"traversing with an empty context\");\n      return;\n    }\n\n    if (node._deleted === true) {\n      return;\n    }\n\n    var path = (0, _nodePath.createPath)(context);\n    callback(node.type, path);\n\n    if (path.shouldStop) {\n      stop = true;\n      return;\n    }\n\n    Object.keys(node).forEach(function (prop) {\n      var value = node[prop];\n\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      var valueAsArray = Array.isArray(value) ? value : [value];\n      valueAsArray.forEach(function (childNode) {\n        if (typeof childNode.type === \"string\") {\n          var childContext = {\n            node: childNode,\n            parentKey: prop,\n            parentPath: path,\n            shouldStop: false,\n            inList: Array.isArray(value)\n          };\n          innerWalk(childContext, callback);\n        }\n      });\n    });\n  }\n\n  innerWalk(context, callback);\n}\n\nvar noop = function noop() {};\n\nfunction traverse(node, visitors) {\n  var before = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n  var after = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;\n  Object.keys(visitors).forEach(function (visitor) {\n    if (!_nodes.nodeAndUnionTypes.includes(visitor)) {\n      throw new Error(\"Unexpected visitor \".concat(visitor));\n    }\n  });\n  var context = {\n    node: node,\n    inList: false,\n    shouldStop: false,\n    parentPath: null,\n    parentKey: null\n  };\n  walk(context, function (type, path) {\n    if (typeof visitors[type] === \"function\") {\n      before(type, path);\n      visitors[type](path);\n      after(type, path);\n    }\n\n    var unionTypes = _nodes.unionTypesMap[type];\n\n    if (!unionTypes) {\n      throw new Error(\"Unexpected node type \".concat(type));\n    }\n\n    unionTypes.forEach(function (unionType) {\n      if (typeof visitors[unionType] === \"function\") {\n        before(unionType, path);\n        visitors[unionType](path);\n        after(unionType, path);\n      }\n    });\n  });\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPath = createPath;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction findParent(_ref, cb) {\n  var parentPath = _ref.parentPath;\n\n  if (parentPath == null) {\n    throw new Error(\"node is root\");\n  }\n\n  var currentPath = parentPath;\n\n  while (cb(currentPath) !== false) {\n    // Hit the root node, stop\n    // $FlowIgnore\n    if (currentPath.parentPath == null) {\n      return null;\n    } // $FlowIgnore\n\n\n    currentPath = currentPath.parentPath;\n  }\n\n  return currentPath.node;\n}\n\nfunction insertBefore(context, newNode) {\n  return insert(context, newNode);\n}\n\nfunction insertAfter(context, newNode) {\n  return insert(context, newNode, 1);\n}\n\nfunction insert(_ref2, newNode) {\n  var node = _ref2.node,\n      inList = _ref2.inList,\n      parentPath = _ref2.parentPath,\n      parentKey = _ref2.parentKey;\n  var indexOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  if (!inList) {\n    throw new Error('inList' + \" error: \" + (\"insert can only be used for nodes that are within lists\" || \"unknown\"));\n  }\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentList = parentPath.node[parentKey];\n  var indexInList = parentList.findIndex(function (n) {\n    return n === node;\n  });\n  parentList.splice(indexInList + indexOffset, 0, newNode);\n}\n\nfunction remove(_ref3) {\n  var node = _ref3.node,\n      parentKey = _ref3.parentKey,\n      parentPath = _ref3.parentPath;\n\n  if (!(parentPath != null)) {\n    throw new Error('parentPath != null' + \" error: \" + (\"Can not remove root node\" || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  var parentNode = parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    // $FlowIgnore\n    parentNode[parentKey] = parentProperty.filter(function (n) {\n      return n !== node;\n    });\n  } else {\n    // $FlowIgnore\n    delete parentNode[parentKey];\n  }\n\n  node._deleted = true;\n}\n\nfunction stop(context) {\n  context.shouldStop = true;\n}\n\nfunction replaceWith(context, newNode) {\n  // $FlowIgnore\n  var parentNode = context.parentPath.node; // $FlowIgnore\n\n  var parentProperty = parentNode[context.parentKey];\n\n  if (Array.isArray(parentProperty)) {\n    var indexInList = parentProperty.findIndex(function (n) {\n      return n === context.node;\n    });\n    parentProperty.splice(indexInList, 1, newNode);\n  } else {\n    // $FlowIgnore\n    parentNode[context.parentKey] = newNode;\n  }\n\n  context.node._deleted = true;\n  context.node = newNode;\n} // bind the context to the first argument of node operations\n\n\nfunction bindNodeOperations(operations, context) {\n  var keys = Object.keys(operations);\n  var boundOperations = {};\n  keys.forEach(function (key) {\n    boundOperations[key] = operations[key].bind(null, context);\n  });\n  return boundOperations;\n}\n\nfunction createPathOperations(context) {\n  // $FlowIgnore\n  return bindNodeOperations({\n    findParent: findParent,\n    replaceWith: replaceWith,\n    remove: remove,\n    insertBefore: insertBefore,\n    insertAfter: insertAfter,\n    stop: stop\n  }, context);\n}\n\nfunction createPath(context) {\n  var path = _extends({}, context); // $FlowIgnore\n\n\n  Object.assign(path, createPathOperations(path)); // $FlowIgnore\n\n  return path;\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.signatures = void 0;\n\nfunction sign(input, output) {\n  return [input, output];\n}\n\nvar u32 = \"u32\";\nvar i32 = \"i32\";\nvar i64 = \"i64\";\nvar f32 = \"f32\";\nvar f64 = \"f64\";\n\nvar vector = function vector(t) {\n  var vecType = [t]; // $FlowIgnore\n\n  vecType.vector = true;\n  return vecType;\n};\n\nvar controlInstructions = {\n  unreachable: sign([], []),\n  nop: sign([], []),\n  // block ?\n  // loop ?\n  // if ?\n  // if else ?\n  br: sign([u32], []),\n  br_if: sign([u32], []),\n  br_table: sign(vector(u32), []),\n  return: sign([], []),\n  call: sign([u32], []),\n  call_indirect: sign([u32], [])\n};\nvar parametricInstructions = {\n  drop: sign([], []),\n  select: sign([], [])\n};\nvar variableInstructions = {\n  get_local: sign([u32], []),\n  set_local: sign([u32], []),\n  tee_local: sign([u32], []),\n  get_global: sign([u32], []),\n  set_global: sign([u32], [])\n};\nvar memoryInstructions = {\n  \"i32.load\": sign([u32, u32], [i32]),\n  \"i64.load\": sign([u32, u32], []),\n  \"f32.load\": sign([u32, u32], []),\n  \"f64.load\": sign([u32, u32], []),\n  \"i32.load8_s\": sign([u32, u32], [i32]),\n  \"i32.load8_u\": sign([u32, u32], [i32]),\n  \"i32.load16_s\": sign([u32, u32], [i32]),\n  \"i32.load16_u\": sign([u32, u32], [i32]),\n  \"i64.load8_s\": sign([u32, u32], [i64]),\n  \"i64.load8_u\": sign([u32, u32], [i64]),\n  \"i64.load16_s\": sign([u32, u32], [i64]),\n  \"i64.load16_u\": sign([u32, u32], [i64]),\n  \"i64.load32_s\": sign([u32, u32], [i64]),\n  \"i64.load32_u\": sign([u32, u32], [i64]),\n  \"i32.store\": sign([u32, u32], []),\n  \"i64.store\": sign([u32, u32], []),\n  \"f32.store\": sign([u32, u32], []),\n  \"f64.store\": sign([u32, u32], []),\n  \"i32.store8\": sign([u32, u32], []),\n  \"i32.store16\": sign([u32, u32], []),\n  \"i64.store8\": sign([u32, u32], []),\n  \"i64.store16\": sign([u32, u32], []),\n  \"i64.store32\": sign([u32, u32], []),\n  current_memory: sign([], []),\n  grow_memory: sign([], [])\n};\nvar numericInstructions = {\n  \"i32.const\": sign([i32], [i32]),\n  \"i64.const\": sign([i64], [i64]),\n  \"f32.const\": sign([f32], [f32]),\n  \"f64.const\": sign([f64], [f64]),\n  \"i32.eqz\": sign([i32], [i32]),\n  \"i32.eq\": sign([i32, i32], [i32]),\n  \"i32.ne\": sign([i32, i32], [i32]),\n  \"i32.lt_s\": sign([i32, i32], [i32]),\n  \"i32.lt_u\": sign([i32, i32], [i32]),\n  \"i32.gt_s\": sign([i32, i32], [i32]),\n  \"i32.gt_u\": sign([i32, i32], [i32]),\n  \"i32.le_s\": sign([i32, i32], [i32]),\n  \"i32.le_u\": sign([i32, i32], [i32]),\n  \"i32.ge_s\": sign([i32, i32], [i32]),\n  \"i32.ge_u\": sign([i32, i32], [i32]),\n  \"i64.eqz\": sign([i64], [i64]),\n  \"i64.eq\": sign([i64, i64], [i32]),\n  \"i64.ne\": sign([i64, i64], [i32]),\n  \"i64.lt_s\": sign([i64, i64], [i32]),\n  \"i64.lt_u\": sign([i64, i64], [i32]),\n  \"i64.gt_s\": sign([i64, i64], [i32]),\n  \"i64.gt_u\": sign([i64, i64], [i32]),\n  \"i64.le_s\": sign([i64, i64], [i32]),\n  \"i64.le_u\": sign([i64, i64], [i32]),\n  \"i64.ge_s\": sign([i64, i64], [i32]),\n  \"i64.ge_u\": sign([i64, i64], [i32]),\n  \"f32.eq\": sign([f32, f32], [i32]),\n  \"f32.ne\": sign([f32, f32], [i32]),\n  \"f32.lt\": sign([f32, f32], [i32]),\n  \"f32.gt\": sign([f32, f32], [i32]),\n  \"f32.le\": sign([f32, f32], [i32]),\n  \"f32.ge\": sign([f32, f32], [i32]),\n  \"f64.eq\": sign([f64, f64], [i32]),\n  \"f64.ne\": sign([f64, f64], [i32]),\n  \"f64.lt\": sign([f64, f64], [i32]),\n  \"f64.gt\": sign([f64, f64], [i32]),\n  \"f64.le\": sign([f64, f64], [i32]),\n  \"f64.ge\": sign([f64, f64], [i32]),\n  \"i32.clz\": sign([i32], [i32]),\n  \"i32.ctz\": sign([i32], [i32]),\n  \"i32.popcnt\": sign([i32], [i32]),\n  \"i32.add\": sign([i32, i32], [i32]),\n  \"i32.sub\": sign([i32, i32], [i32]),\n  \"i32.mul\": sign([i32, i32], [i32]),\n  \"i32.div_s\": sign([i32, i32], [i32]),\n  \"i32.div_u\": sign([i32, i32], [i32]),\n  \"i32.rem_s\": sign([i32, i32], [i32]),\n  \"i32.rem_u\": sign([i32, i32], [i32]),\n  \"i32.and\": sign([i32, i32], [i32]),\n  \"i32.or\": sign([i32, i32], [i32]),\n  \"i32.xor\": sign([i32, i32], [i32]),\n  \"i32.shl\": sign([i32, i32], [i32]),\n  \"i32.shr_s\": sign([i32, i32], [i32]),\n  \"i32.shr_u\": sign([i32, i32], [i32]),\n  \"i32.rotl\": sign([i32, i32], [i32]),\n  \"i32.rotr\": sign([i32, i32], [i32]),\n  \"i64.clz\": sign([i64], [i64]),\n  \"i64.ctz\": sign([i64], [i64]),\n  \"i64.popcnt\": sign([i64], [i64]),\n  \"i64.add\": sign([i64, i64], [i64]),\n  \"i64.sub\": sign([i64, i64], [i64]),\n  \"i64.mul\": sign([i64, i64], [i64]),\n  \"i64.div_s\": sign([i64, i64], [i64]),\n  \"i64.div_u\": sign([i64, i64], [i64]),\n  \"i64.rem_s\": sign([i64, i64], [i64]),\n  \"i64.rem_u\": sign([i64, i64], [i64]),\n  \"i64.and\": sign([i64, i64], [i64]),\n  \"i64.or\": sign([i64, i64], [i64]),\n  \"i64.xor\": sign([i64, i64], [i64]),\n  \"i64.shl\": sign([i64, i64], [i64]),\n  \"i64.shr_s\": sign([i64, i64], [i64]),\n  \"i64.shr_u\": sign([i64, i64], [i64]),\n  \"i64.rotl\": sign([i64, i64], [i64]),\n  \"i64.rotr\": sign([i64, i64], [i64]),\n  \"f32.abs\": sign([f32], [f32]),\n  \"f32.neg\": sign([f32], [f32]),\n  \"f32.ceil\": sign([f32], [f32]),\n  \"f32.floor\": sign([f32], [f32]),\n  \"f32.trunc\": sign([f32], [f32]),\n  \"f32.nearest\": sign([f32], [f32]),\n  \"f32.sqrt\": sign([f32], [f32]),\n  \"f32.add\": sign([f32, f32], [f32]),\n  \"f32.sub\": sign([f32, f32], [f32]),\n  \"f32.mul\": sign([f32, f32], [f32]),\n  \"f32.div\": sign([f32, f32], [f32]),\n  \"f32.min\": sign([f32, f32], [f32]),\n  \"f32.max\": sign([f32, f32], [f32]),\n  \"f32.copysign\": sign([f32, f32], [f32]),\n  \"f64.abs\": sign([f64], [f64]),\n  \"f64.neg\": sign([f64], [f64]),\n  \"f64.ceil\": sign([f64], [f64]),\n  \"f64.floor\": sign([f64], [f64]),\n  \"f64.trunc\": sign([f64], [f64]),\n  \"f64.nearest\": sign([f64], [f64]),\n  \"f64.sqrt\": sign([f64], [f64]),\n  \"f64.add\": sign([f64, f64], [f64]),\n  \"f64.sub\": sign([f64, f64], [f64]),\n  \"f64.mul\": sign([f64, f64], [f64]),\n  \"f64.div\": sign([f64, f64], [f64]),\n  \"f64.min\": sign([f64, f64], [f64]),\n  \"f64.max\": sign([f64, f64], [f64]),\n  \"f64.copysign\": sign([f64, f64], [f64]),\n  \"i32.wrap/i64\": sign([i64], [i32]),\n  \"i32.trunc_s/f32\": sign([f32], [i32]),\n  \"i32.trunc_u/f32\": sign([f32], [i32]),\n  \"i32.trunc_s/f64\": sign([f32], [i32]),\n  \"i32.trunc_u/f64\": sign([f64], [i32]),\n  \"i64.extend_s/i32\": sign([i32], [i64]),\n  \"i64.extend_u/i32\": sign([i32], [i64]),\n  \"i64.trunc_s/f32\": sign([f32], [i64]),\n  \"i64.trunc_u/f32\": sign([f32], [i64]),\n  \"i64.trunc_s/f64\": sign([f64], [i64]),\n  \"i64.trunc_u/f64\": sign([f64], [i64]),\n  \"f32.convert_s/i32\": sign([i32], [f32]),\n  \"f32.convert_u/i32\": sign([i32], [f32]),\n  \"f32.convert_s/i64\": sign([i64], [f32]),\n  \"f32.convert_u/i64\": sign([i64], [f32]),\n  \"f32.demote/f64\": sign([f64], [f32]),\n  \"f64.convert_s/i32\": sign([i32], [f64]),\n  \"f64.convert_u/i32\": sign([i32], [f64]),\n  \"f64.convert_s/i64\": sign([i64], [f64]),\n  \"f64.convert_u/i64\": sign([i64], [f64]),\n  \"f64.promote/f32\": sign([f32], [f64]),\n  \"i32.reinterpret/f32\": sign([f32], [i32]),\n  \"i64.reinterpret/f64\": sign([f64], [i64]),\n  \"f32.reinterpret/i32\": sign([i32], [f32]),\n  \"f64.reinterpret/i64\": sign([i64], [f64])\n};\nvar signatures = Object.assign({}, controlInstructions, parametricInstructions, variableInstructions, memoryInstructions, numericInstructions);\nexports.signatures = signatures;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAnonymous = isAnonymous;\nexports.getSectionMetadata = getSectionMetadata;\nexports.getSectionMetadatas = getSectionMetadatas;\nexports.sortSectionMetadata = sortSectionMetadata;\nexports.orderedInsertNode = orderedInsertNode;\nexports.assertHasLoc = assertHasLoc;\nexports.getEndOfSection = getEndOfSection;\nexports.shiftLoc = shiftLoc;\nexports.shiftSection = shiftSection;\nexports.signatureForOpcode = signatureForOpcode;\nexports.getUniqueNameGenerator = getUniqueNameGenerator;\nexports.getStartByteOffset = getStartByteOffset;\nexports.getEndByteOffset = getEndByteOffset;\nexports.getFunctionBeginingByteOffset = getFunctionBeginingByteOffset;\nexports.getEndBlockByteOffset = getEndBlockByteOffset;\nexports.getStartBlockByteOffset = getStartBlockByteOffset;\n\nvar _signatures = require(\"./signatures\");\n\nvar _traverse = require(\"./traverse\");\n\nvar _helperWasmBytecode = _interopRequireWildcard(require(\"@webassemblyjs/helper-wasm-bytecode\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\nfunction _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction isAnonymous(ident) {\n  return ident.raw === \"\";\n}\n\nfunction getSectionMetadata(ast, name) {\n  var section;\n  (0, _traverse.traverse)(ast, {\n    SectionMetadata: function (_SectionMetadata) {\n      function SectionMetadata(_x) {\n        return _SectionMetadata.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref) {\n      var node = _ref.node;\n\n      if (node.section === name) {\n        section = node;\n      }\n    })\n  });\n  return section;\n}\n\nfunction getSectionMetadatas(ast, name) {\n  var sections = [];\n  (0, _traverse.traverse)(ast, {\n    SectionMetadata: function (_SectionMetadata2) {\n      function SectionMetadata(_x2) {\n        return _SectionMetadata2.apply(this, arguments);\n      }\n\n      SectionMetadata.toString = function () {\n        return _SectionMetadata2.toString();\n      };\n\n      return SectionMetadata;\n    }(function (_ref2) {\n      var node = _ref2.node;\n\n      if (node.section === name) {\n        sections.push(node);\n      }\n    })\n  });\n  return sections;\n}\n\nfunction sortSectionMetadata(m) {\n  if (m.metadata == null) {\n    console.warn(\"sortSectionMetadata: no metadata to sort\");\n    return;\n  } // $FlowIgnore\n\n\n  m.metadata.sections.sort(function (a, b) {\n    var aId = _helperWasmBytecode.default.sections[a.section];\n    var bId = _helperWasmBytecode.default.sections[b.section];\n\n    if (typeof aId !== \"number\" || typeof bId !== \"number\") {\n      throw new Error(\"Section id not found\");\n    }\n\n    return aId - bId;\n  });\n}\n\nfunction orderedInsertNode(m, n) {\n  assertHasLoc(n);\n  var didInsert = false;\n\n  if (n.type === \"ModuleExport\") {\n    m.fields.push(n);\n    return;\n  }\n\n  m.fields = m.fields.reduce(function (acc, field) {\n    var fieldEndCol = Infinity;\n\n    if (field.loc != null) {\n      // $FlowIgnore\n      fieldEndCol = field.loc.end.column;\n    } // $FlowIgnore: assertHasLoc ensures that\n\n\n    if (didInsert === false && n.loc.start.column < fieldEndCol) {\n      didInsert = true;\n      acc.push(n);\n    }\n\n    acc.push(field);\n    return acc;\n  }, []); // Handles empty modules or n is the last element\n\n  if (didInsert === false) {\n    m.fields.push(n);\n  }\n}\n\nfunction assertHasLoc(n) {\n  if (n.loc == null || n.loc.start == null || n.loc.end == null) {\n    throw new Error(\"Internal failure: node (\".concat(JSON.stringify(n.type), \") has no location information\"));\n  }\n}\n\nfunction getEndOfSection(s) {\n  assertHasLoc(s.size);\n  return s.startOffset + s.size.value + ( // $FlowIgnore\n  s.size.loc.end.column - s.size.loc.start.column);\n}\n\nfunction shiftLoc(node, delta) {\n  // $FlowIgnore\n  node.loc.start.column += delta; // $FlowIgnore\n\n  node.loc.end.column += delta;\n}\n\nfunction shiftSection(ast, node, delta) {\n  if (node.type !== \"SectionMetadata\") {\n    throw new Error(\"Can not shift node \" + JSON.stringify(node.type));\n  }\n\n  node.startOffset += delta;\n\n  if (_typeof(node.size.loc) === \"object\") {\n    shiftLoc(node.size, delta);\n  } // Custom sections doesn't have vectorOfSize\n\n\n  if (_typeof(node.vectorOfSize) === \"object\" && _typeof(node.vectorOfSize.loc) === \"object\") {\n    shiftLoc(node.vectorOfSize, delta);\n  }\n\n  var sectionName = node.section; // shift node locations within that section\n\n  (0, _traverse.traverse)(ast, {\n    Node: function Node(_ref3) {\n      var node = _ref3.node;\n      var section = (0, _helperWasmBytecode.getSectionForNode)(node);\n\n      if (section === sectionName && _typeof(node.loc) === \"object\") {\n        shiftLoc(node, delta);\n      }\n    }\n  });\n}\n\nfunction signatureForOpcode(object, name) {\n  var opcodeName = name;\n\n  if (object !== undefined && object !== \"\") {\n    opcodeName = object + \".\" + name;\n  }\n\n  var sign = _signatures.signatures[opcodeName];\n\n  if (sign == undefined) {\n    // TODO: Uncomment this when br_table and others has been done\n    //throw new Error(\"Invalid opcode: \"+opcodeName);\n    return [object, object];\n  }\n\n  return sign[0];\n}\n\nfunction getUniqueNameGenerator() {\n  var inc = {};\n  return function () {\n    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"temp\";\n\n    if (!(prefix in inc)) {\n      inc[prefix] = 0;\n    } else {\n      inc[prefix] = inc[prefix] + 1;\n    }\n\n    return prefix + \"_\" + inc[prefix];\n  };\n}\n\nfunction getStartByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.start === \"undefined\") {\n    throw new Error( // $FlowIgnore\n    \"Can not get byte offset without loc informations, node: \" + String(n.id));\n  }\n\n  return n.loc.start.column;\n}\n\nfunction getEndByteOffset(n) {\n  // $FlowIgnore\n  if (typeof n.loc === \"undefined\" || typeof n.loc.end === \"undefined\") {\n    throw new Error(\"Can not get byte offset without loc informations, node: \" + n.type);\n  }\n\n  return n.loc.end.column;\n}\n\nfunction getFunctionBeginingByteOffset(n) {\n  if (!(n.body.length > 0)) {\n    throw new Error('n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var _n$body = _slicedToArray(n.body, 1),\n      firstInstruction = _n$body[0];\n\n  return getStartByteOffset(firstInstruction);\n}\n\nfunction getEndBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var lastInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    lastInstruction = n.instr[n.instr.length - 1];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    lastInstruction = n.body[n.body.length - 1];\n  }\n\n  if (!(_typeof(lastInstruction) === \"object\")) {\n    throw new Error('typeof lastInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  return getStartByteOffset(lastInstruction);\n}\n\nfunction getStartBlockByteOffset(n) {\n  // $FlowIgnore\n  if (!(n.instr.length > 0 || n.body.length > 0)) {\n    throw new Error('n.instr.length > 0 || n.body.length > 0' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  var fistInstruction;\n\n  if (n.instr) {\n    // $FlowIgnore\n    var _n$instr = _slicedToArray(n.instr, 1);\n\n    fistInstruction = _n$instr[0];\n  }\n\n  if (n.body) {\n    // $FlowIgnore\n    var _n$body2 = _slicedToArray(n.body, 1);\n\n    fistInstruction = _n$body2[0];\n  }\n\n  if (!(_typeof(fistInstruction) === \"object\")) {\n    throw new Error('typeof fistInstruction === \"object\"' + \" error: \" + (undefined || \"unknown\"));\n  }\n\n  // $FlowIgnore\n  return getStartByteOffset(fistInstruction);\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneNode = cloneNode;\n\nfunction cloneNode(n) {\n  // $FlowIgnore\n  var newObj = {};\n\n  for (var k in n) {\n    newObj[k] = n[k];\n  }\n\n  return newObj;\n}"]}