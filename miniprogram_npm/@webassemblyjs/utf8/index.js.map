{"version":3,"sources":["index.js","decoder.js","encoder.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"decode\", {\n  enumerable: true,\n  get: function get() {\n    return _decoder.decode;\n  }\n});\nObject.defineProperty(exports, \"encode\", {\n  enumerable: true,\n  get: function get() {\n    return _encoder.encode;\n  }\n});\n\nvar _decoder = require(\"./decoder\");\n\nvar _encoder = require(\"./encoder\");","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decode = decode;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction con(b) {\n  if ((b & 0xc0) === 0x80) {\n    return b & 0x3f;\n  } else {\n    throw new Error(\"invalid UTF-8 encoding\");\n  }\n}\n\nfunction code(min, n) {\n  if (n < min || 0xd800 <= n && n < 0xe000 || n >= 0x10000) {\n    throw new Error(\"invalid UTF-8 encoding\");\n  } else {\n    return n;\n  }\n}\n\nfunction decode(bytes) {\n  return _decode(bytes).map(function (x) {\n    return String.fromCharCode(x);\n  }).join(\"\");\n}\n\nfunction _decode(bytes) {\n  if (bytes.length === 0) {\n    return [];\n  }\n  /**\n   * 1 byte\n   */\n\n\n  {\n    var _bytes = _toArray(bytes),\n        b1 = _bytes[0],\n        bs = _bytes.slice(1);\n\n    if (b1 < 0x80) {\n      return [code(0x0, b1)].concat(_toConsumableArray(_decode(bs)));\n    }\n\n    if (b1 < 0xc0) {\n      throw new Error(\"invalid UTF-8 encoding\");\n    }\n  }\n  /**\n   * 2 bytes\n   */\n\n  {\n    var _bytes2 = _toArray(bytes),\n        _b = _bytes2[0],\n        b2 = _bytes2[1],\n        _bs = _bytes2.slice(2);\n\n    if (_b < 0xe0) {\n      return [code(0x80, ((_b & 0x1f) << 6) + con(b2))].concat(_toConsumableArray(_decode(_bs)));\n    }\n  }\n  /**\n   * 3 bytes\n   */\n\n  {\n    var _bytes3 = _toArray(bytes),\n        _b2 = _bytes3[0],\n        _b3 = _bytes3[1],\n        b3 = _bytes3[2],\n        _bs2 = _bytes3.slice(3);\n\n    if (_b2 < 0xf0) {\n      return [code(0x800, ((_b2 & 0x0f) << 12) + (con(_b3) << 6) + con(b3))].concat(_toConsumableArray(_decode(_bs2)));\n    }\n  }\n  /**\n   * 4 bytes\n   */\n\n  {\n    var _bytes4 = _toArray(bytes),\n        _b4 = _bytes4[0],\n        _b5 = _bytes4[1],\n        _b6 = _bytes4[2],\n        b4 = _bytes4[3],\n        _bs3 = _bytes4.slice(4);\n\n    if (_b4 < 0xf8) {\n      return [code(0x10000, (((_b4 & 0x07) << 18) + con(_b5) << 12) + (con(_b6) << 6) + con(b4))].concat(_toConsumableArray(_decode(_bs3)));\n    }\n  }\n  throw new Error(\"invalid UTF-8 encoding\");\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = encode;\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\nfunction con(n) {\n  return 0x80 | n & 0x3f;\n}\n\nfunction encode(str) {\n  var arr = str.split(\"\").map(function (x) {\n    return x.charCodeAt(0);\n  });\n  return _encode(arr);\n}\n\nfunction _encode(arr) {\n  if (arr.length === 0) {\n    return [];\n  }\n\n  var _arr = _toArray(arr),\n      n = _arr[0],\n      ns = _arr.slice(1);\n\n  if (n < 0) {\n    throw new Error(\"utf8\");\n  }\n\n  if (n < 0x80) {\n    return [n].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x800) {\n    return [0xc0 | n >>> 6, con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x10000) {\n    return [0xe0 | n >>> 12, con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  if (n < 0x110000) {\n    return [0xf0 | n >>> 18, con(n >>> 12), con(n >>> 6), con(n)].concat(_toConsumableArray(_encode(ns)));\n  }\n\n  throw new Error(\"utf8\");\n}"]}