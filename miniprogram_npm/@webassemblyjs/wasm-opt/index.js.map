{"version":3,"sources":["index.js","leb128.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\n\nvar _wasmParser = require(\"@webassemblyjs/wasm-parser\");\n\nvar _leb = require(\"./leb128.js\");\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar OptimizerError =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(OptimizerError, _Error);\n\n  function OptimizerError(name, initalError) {\n    var _this;\n\n    _classCallCheck(this, OptimizerError);\n\n    _this = _possibleConstructorReturn(this, (OptimizerError.__proto__ || Object.getPrototypeOf(OptimizerError)).call(this, \"Error while optimizing: \" + name + \": \" + initalError.message));\n    _this.stack = initalError.stack;\n    return _this;\n  }\n\n  return OptimizerError;\n}(Error);\n\nvar decoderOpts = {\n  ignoreCodeSection: true,\n  ignoreDataSection: true\n};\n\nfunction shrinkPaddedLEB128(uint8Buffer) {\n  try {\n    var ast = (0, _wasmParser.decode)(uint8Buffer.buffer, decoderOpts);\n    return (0, _leb.shrinkPaddedLEB128)(ast, uint8Buffer);\n  } catch (e) {\n    throw new OptimizerError(\"shrinkPaddedLEB128\", e);\n  }\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shrinkPaddedLEB128 = shrinkPaddedLEB128;\n\nvar _ast = require(\"@webassemblyjs/ast\");\n\nvar _encoder = require(\"@webassemblyjs/wasm-gen/lib/encoder\");\n\nvar _helperBuffer = require(\"@webassemblyjs/helper-buffer\");\n\nfunction shiftFollowingSections(ast, _ref, deltaInSizeEncoding) {\n  var section = _ref.section;\n  // Once we hit our section every that is after needs to be shifted by the delta\n  var encounteredSection = false;\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(path) {\n      if (path.node.section === section) {\n        encounteredSection = true;\n        return;\n      }\n\n      if (encounteredSection === true) {\n        (0, _ast.shiftSection)(ast, path.node, deltaInSizeEncoding);\n      }\n    }\n  });\n}\n\nfunction shrinkPaddedLEB128(ast, uint8Buffer) {\n  (0, _ast.traverse)(ast, {\n    SectionMetadata: function SectionMetadata(_ref2) {\n      var node = _ref2.node;\n\n      /**\n       * Section size\n       */\n      {\n        var newu32Encoded = (0, _encoder.encodeU32)(node.size.value);\n        var newu32EncodedLen = newu32Encoded.length;\n        var start = node.size.loc.start.column;\n        var end = node.size.loc.end.column;\n        var oldu32EncodedLen = end - start;\n\n        if (newu32EncodedLen !== oldu32EncodedLen) {\n          var deltaInSizeEncoding = oldu32EncodedLen - newu32EncodedLen;\n          uint8Buffer = (0, _helperBuffer.overrideBytesInBuffer)(uint8Buffer, start, end, newu32Encoded);\n          shiftFollowingSections(ast, node, -deltaInSizeEncoding);\n        }\n      }\n    }\n  });\n  return uint8Buffer;\n}"]}