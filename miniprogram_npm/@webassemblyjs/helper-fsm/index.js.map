{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeTransition = makeTransition;\nexports.FSM = void 0;\n\nfunction _sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _slicedToArray(arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return _sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar STOP = Symbol(\"STOP\");\n\nfunction makeTransition(regex, nextState) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref$n = _ref.n,\n      n = _ref$n === void 0 ? 1 : _ref$n,\n      allowedSeparator = _ref.allowedSeparator;\n\n  return function (instance) {\n    if (allowedSeparator) {\n      if (instance.input[instance.ptr] === allowedSeparator) {\n        if (regex.test(instance.input.substring(instance.ptr - 1, instance.ptr))) {\n          // Consume the separator and stay in current state\n          return [instance.currentState, 1];\n        } else {\n          return [instance.terminatingState, 0];\n        }\n      }\n    }\n\n    if (regex.test(instance.input.substring(instance.ptr, instance.ptr + n))) {\n      return [nextState, n];\n    }\n\n    return false;\n  };\n}\n\nfunction combineTransitions(transitions) {\n  return function () {\n    var match = false;\n    var currentTransitions = transitions[this.currentState] || [];\n\n    for (var i = 0; i < currentTransitions.length; ++i) {\n      match = currentTransitions[i](this);\n\n      if (match !== false) {\n        break;\n      }\n    }\n\n    return match || [this.terminatingState, 0];\n  };\n}\n\nvar FSM =\n/*#__PURE__*/\nfunction () {\n  function FSM(transitions, initialState) {\n    var terminatingState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : STOP;\n\n    _classCallCheck(this, FSM);\n\n    this.initialState = initialState;\n    this.terminatingState = terminatingState;\n\n    if (terminatingState === STOP || !transitions[terminatingState]) {\n      transitions[terminatingState] = [];\n    }\n\n    this.transitionFunction = combineTransitions.call(this, transitions);\n  }\n\n  _createClass(FSM, [{\n    key: \"run\",\n    value: function run(input) {\n      this.input = input;\n      this.ptr = 0;\n      this.currentState = this.initialState;\n      var value = \"\";\n      var eatLength, nextState;\n\n      while (this.currentState !== this.terminatingState && this.ptr < this.input.length) {\n        var _transitionFunction = this.transitionFunction();\n\n        var _transitionFunction2 = _slicedToArray(_transitionFunction, 2);\n\n        nextState = _transitionFunction2[0];\n        eatLength = _transitionFunction2[1];\n        value += this.input.substring(this.ptr, this.ptr += eatLength);\n        this.currentState = nextState;\n      }\n\n      return value;\n    }\n  }]);\n\n  return FSM;\n}();\n\nexports.FSM = FSM;"]}