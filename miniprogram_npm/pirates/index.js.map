{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addHook = addHook;\n\nvar _module = _interopRequireDefault(require(\"module\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* (c) 2015 Ari Porad (@ariporad) <http://ariporad.com>. License: ariporad.mit-license.org */\nconst nodeModulesRegex = /^(?:.*[\\\\/])?node_modules(?:[\\\\/].*)?$/; // Guard against poorly mocked module constructors.\n\nconst Module = module.constructor.length > 1 ? module.constructor : _module.default;\nconst HOOK_RETURNED_NOTHING_ERROR_MESSAGE = '[Pirates] A hook returned a non-string, or nothing at all! This is a' + ' violation of intergalactic law!\\n' + '--------------------\\n' + 'If you have no idea what this means or what Pirates is, let me explain: ' + 'Pirates is a module that makes is easy to implement require hooks. One of' + \" the require hooks you're using uses it. One of these require hooks\" + \" didn't return anything from it's handler, so we don't know what to\" + ' do. You might want to debug this.';\n/**\n * @param {string} filename The filename to check.\n * @param {string[]} exts The extensions to hook. Should start with '.' (ex. ['.js']).\n * @param {Matcher|null} matcher A matcher function, will be called with path to a file. Should return truthy if the file should be hooked, falsy otherwise.\n * @param {boolean} ignoreNodeModules Auto-ignore node_modules. Independent of any matcher.\n */\n\nfunction shouldCompile(filename, exts, matcher, ignoreNodeModules) {\n  if (typeof filename !== 'string') {\n    return false;\n  }\n\n  if (exts.indexOf(_path.default.extname(filename)) === -1) {\n    return false;\n  }\n\n  const resolvedFilename = _path.default.resolve(filename);\n\n  if (ignoreNodeModules && nodeModulesRegex.test(resolvedFilename)) {\n    return false;\n  }\n\n  if (matcher && typeof matcher === 'function') {\n    return !!matcher(resolvedFilename);\n  }\n\n  return true;\n}\n/**\n * @callback Hook The hook. Accepts the code of the module and the filename.\n * @param {string} code\n * @param {string} filename\n * @returns {string}\n */\n\n/**\n * @callback Matcher A matcher function, will be called with path to a file.\n *\n * Should return truthy if the file should be hooked, falsy otherwise.\n * @param {string} path\n * @returns {boolean}\n */\n\n/**\n * @callback RevertFunction Reverts the hook when called.\n * @returns {void}\n */\n\n/**\n * @typedef {object} Options\n * @property {Matcher|null} [matcher=null] A matcher function, will be called with path to a file.\n *\n * Should return truthy if the file should be hooked, falsy otherwise.\n *\n * @property {string[]} [extensions=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n * @property {string[]} [exts=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n *\n * @property {string[]} [extension=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n * @property {string[]} [ext=['.js']] The extensions to hook. Should start with '.' (ex. ['.js']).\n *\n * @property {boolean} [ignoreNodeModules=true] Auto-ignore node_modules. Independent of any matcher.\n */\n\n/**\n * Add a require hook.\n *\n * @param {Hook} hook The hook. Accepts the code of the module and the filename. Required.\n * @param {Options} [opts] Options\n * @returns {RevertFunction} The `revert` function. Reverts the hook when called.\n */\n\n\nfunction addHook(hook, opts = {}) {\n  let reverted = false;\n  const loaders = [];\n  const oldLoaders = [];\n  let exts; // We need to do this to fix #15. Basically, if you use a non-standard extension (ie. .jsx), then\n  // We modify the .js loader, then use the modified .js loader for as the base for .jsx.\n  // This prevents that.\n\n  const originalJSLoader = Module._extensions['.js'];\n  const matcher = opts.matcher || null;\n  const ignoreNodeModules = opts.ignoreNodeModules !== false;\n  exts = opts.extensions || opts.exts || opts.extension || opts.ext || ['.js'];\n\n  if (!Array.isArray(exts)) {\n    exts = [exts];\n  }\n\n  exts.forEach(ext => {\n    if (typeof ext !== 'string') {\n      throw new TypeError(`Invalid Extension: ${ext}`);\n    }\n\n    const oldLoader = Module._extensions[ext] || originalJSLoader;\n    oldLoaders[ext] = Module._extensions[ext];\n\n    loaders[ext] = Module._extensions[ext] = function newLoader(mod, filename) {\n      let compile;\n\n      if (!reverted) {\n        if (shouldCompile(filename, exts, matcher, ignoreNodeModules)) {\n          compile = mod._compile;\n\n          mod._compile = function _compile(code) {\n            // reset the compile immediately as otherwise we end up having the\n            // compile function being changed even though this loader might be reverted\n            // Not reverting it here leads to long useless compile chains when doing\n            // addHook -> revert -> addHook -> revert -> ...\n            // The compile function is also anyway created new when the loader is called a second time.\n            mod._compile = compile;\n            const newCode = hook(code, filename);\n\n            if (typeof newCode !== 'string') {\n              throw new Error(HOOK_RETURNED_NOTHING_ERROR_MESSAGE);\n            }\n\n            return mod._compile(newCode, filename);\n          };\n        }\n      }\n\n      oldLoader(mod, filename);\n    };\n  });\n  return function revert() {\n    if (reverted) return;\n    reverted = true;\n    exts.forEach(ext => {\n      // if the current loader for the extension is our loader then unregister it and set the oldLoader again\n      // if not we can not do anything as we cannot remove a loader from within the loader-chain\n      if (Module._extensions[ext] === loaders[ext]) {\n        if (!oldLoaders[ext]) {\n          delete Module._extensions[ext];\n        } else {\n          Module._extensions[ext] = oldLoaders[ext];\n        }\n      }\n    });\n  };\n}"]}