{"version":3,"sources":["index.js","sniffer-linux.js","sniffer-mac.js","sniffer-windows.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AENA,ACHA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AHUA,AGTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst sniffer_linux_1 = require(\"./sniffer-linux\");\nconst sniffer_mac_1 = require(\"./sniffer-mac\");\nconst sniffer_windows_1 = require(\"./sniffer-windows\");\nconst lookupMap = {\n    win32: sniffer_windows_1.default,\n    darwin: sniffer_mac_1.default,\n    linux: sniffer_linux_1.default,\n};\nlet chromeArgs = ['--enable-devtools-experiments', '--no-first-run'];\nfunction launch(url, options = {}) {\n    setupUserProfileArg();\n    return new Promise((resolve, reject) => {\n        lookupForChromePath(options).then(chromeBinaryPath => {\n            const chromeProcess = launchChrome(chromeBinaryPath, url, options);\n            resolve(chromeProcess);\n        }, err => {\n            reject(err);\n        });\n    });\n}\nfunction lookupForChromePath(options) {\n    return new Promise((resolve, reject) => {\n        let chromePath = options.chromePath;\n        if (chromePath) {\n            try {\n                chromePath = path.resolve(chromePath);\n                fs.accessSync(chromePath);\n                return resolve(chromePath);\n            }\n            catch (err) {\n                return reject(err);\n            }\n        }\n        else {\n            const lookupMethod = lookupMap[process.platform];\n            lookupMethod().then(value => {\n                return resolve(value);\n            });\n        }\n    });\n}\nfunction setupUserProfileArg() {\n    chromeArgs = chromeArgs.concat([\n        `--user-data-dir=${path.resolve(__dirname, '.devProfile')}`,\n    ]);\n}\nfunction launchChrome(filePath, url, options) {\n    let child;\n    const argsUrl = chromeArgs.concat([url]);\n    try {\n        child = child_process_1.spawn(filePath, argsUrl);\n    }\n    catch (err) {\n        onLaunchChromeError(err);\n        return err;\n    }\n    child.on('error', onLaunchChromeError);\n    child.on('exit', onChromeExit);\n    return child;\n    function onLaunchChromeError(err) {\n        typeof options.onError === 'function' && options.onError(err);\n    }\n    function onChromeExit() {\n        typeof options.onExit === 'function' && options.onExit();\n    }\n}\nmodule.exports = { launch };\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fileNameList = ['google-chrome', 'chromium-browser'];\nfunction getChromePath() {\n    return new Promise((resolve, reject) => {\n        child_process_1.exec(`which ${fileNameList[0]}`, (err, stdout, stderr) => {\n            if (!err) {\n                const chromePath = stdout.replace(/\\n/g, '');\n                resolve(chromePath);\n                return;\n            }\n            fileNameList.shift();\n            if (!fileNameList[0]) {\n                reject(err);\n            }\n            else {\n                getChromePath().then(resolve, reject);\n            }\n        });\n    });\n}\nfunction lookupChromeLinux() {\n    return getChromePath();\n}\nexports.default = lookupChromeLinux;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nfunction lookupChromeMac() {\n    const bundles = ['com.google.Chrome.canary', 'com.google.Chrome'];\n    function mdFind() {\n        return new Promise((resolve, reject) => {\n            child_process_1.exec(`mdfind 'kMDItemCFBundleIdentifier=${bundles[0]}'`, (err, stdout, stderr) => {\n                const chromePath = stdout.trim();\n                if (!err && fs.existsSync(chromePath)) {\n                    resolve(path.join(chromePath, `/Contents/MacOS/${path.basename(chromePath, '.app')}`));\n                }\n                else {\n                    bundles.shift();\n                    if (bundles[0]) {\n                        mdFind().then(resolve, reject);\n                    }\n                    else {\n                        reject(err);\n                    }\n                }\n            });\n        });\n    }\n    return mdFind();\n}\nexports.default = lookupChromeMac;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst child_process_1 = require(\"child_process\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nfunction lookupChromeWindows() {\n    return new Promise((resolve, reject) => {\n        let chromePath = '';\n        const chromeSysRegHKey = '\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\\\\chrome.exe\" /v path';\n        child_process_1.exec(`REG QUERY ${chromeSysRegHKey}`, {}, (err, stdout) => {\n            if (!err) {\n                chromePath = downgradLookup();\n                if (!chromePath) {\n                    reject(err);\n                    return;\n                }\n                else {\n                    resolve(chromePath);\n                    return;\n                }\n            }\n            if (typeof stdout === 'string') {\n                chromePath = parseChromePathFromRegOutput(stdout);\n            }\n            if (!chromePath) {\n                reject(new Error(`无法解析Reg Query输出`));\n                return;\n            }\n            resolve(chromePath);\n        });\n    });\n}\nexports.default = lookupChromeWindows;\nfunction downgradLookup() {\n    let chromePath = '';\n    const suffix = '\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe';\n    const prefixes = [\n        process.env.LOCALAPPDATA || '',\n        process.env.PROGRAMFILES || '',\n        process.env['PROGRAMFILES(X86)'] || '',\n    ];\n    for (const prefix of prefixes) {\n        try {\n            chromePath = path.join(prefix, suffix);\n            fs.accessSync(chromePath);\n            break;\n        }\n        catch (err) { }\n    }\n    return chromePath;\n}\nfunction parseChromePathFromRegOutput(stdout) {\n    const lines = stdout.split('\\n');\n    let testPath = '', chromePath = '';\n    lines.every(line => {\n        const targLine = line.match(/path\\s+reg_sz\\s+(.+)/i);\n        if (targLine) {\n            testPath = targLine[1];\n            return false;\n        }\n        return true;\n    });\n    try {\n        testPath = path.resolve(testPath, 'chrome.exe');\n        fs.accessSync(testPath);\n        chromePath = testPath;\n    }\n    catch (err) { }\n    return chromePath;\n}\n"]}