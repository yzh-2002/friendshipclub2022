{"version":3,"sources":["AdbCommander.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nconst adb_driver_1 = require(\"adb-driver\");\nclass ADBCommander {\n    async _commandFactory(command) {\n        const cmdResult = await adb_driver_1.execADBCommand(command);\n        const isError = cmdResult instanceof Error || (cmdResult.stack && cmdResult.message);\n        if (isError) {\n            return { err: cmdResult };\n        }\n        else {\n            return { result: cmdResult };\n        }\n    }\n    async deviceList() {\n        const { result, err } = await this._commandFactory(`adb devices`);\n        return {\n            deviceList: _parseDeviceInfo(result),\n            err,\n        };\n        function _parseDeviceInfo(stdout) {\n            if (!stdout) {\n                return [];\n            }\n            const lines = stdout.replace(/(\\n|\\r\\n){1,}/g, '\\n').split('\\n');\n            const result = lines\n                .filter((item, idx) => {\n                const oneDevice = item.split('\\t');\n                return idx !== 0 && oneDevice[1] === 'device';\n            })\n                .map(item => {\n                return item.split('\\t')[0];\n            });\n            return result;\n        }\n    }\n    async reverse(deviceSN, localPort, remotePort) {\n        const cmd = `adb -s ${deviceSN} reverse tcp:${remotePort} tcp:${localPort}`;\n        return await this._commandFactory(cmd);\n    }\n    async forward(deviceSN, localPort, remotePort) {\n        const cmd = `adb -s ${deviceSN} forward tcp:${localPort} tcp:${remotePort}`;\n        return await this._commandFactory(cmd);\n    }\n    async version() {\n        const { result, err } = await this._commandFactory(`adb version`);\n        return { version: result, err };\n    }\n    async print(cmd) {\n        const { err } = await this._commandFactory(cmd);\n        if (err) {\n            console.error(`### App Server ### print(): adb error: ${err.message}`);\n        }\n    }\n    async uninstall(deviceSN, pkg) {\n        const { result, err } = await this._commandFactory(`adb -s ${deviceSN} uninstall ${pkg}`);\n        return { result, err };\n    }\n    async install(deviceSN, apkPath) {\n        const { result, err } = await this._commandFactory(`adb -s ${deviceSN} install ${apkPath}`);\n        return { result, err };\n    }\n    async isInstalled(deviceSN, pkg) {\n        const { result, err } = await this._commandFactory(`adb -s ${deviceSN} shell pm path ${pkg}`);\n        let isInstalled = false;\n        if (result && result.indexOf('package:') > -1) {\n            isInstalled = true;\n        }\n        return { isInstalled, err };\n    }\n    async startActivity(deviceSN, action, component, extra) {\n        let commandArray = [];\n        commandArray.push('adb', '-s', deviceSN, 'shell', 'am', 'start');\n        if (action !== undefined) {\n            commandArray.push('-a', action);\n        }\n        if (component !== undefined) {\n            commandArray.push('-n', component);\n        }\n        function parseExtra(extra) {\n            const typeMap = {\n                string: '--es',\n                null: '--esn',\n                boolean: '--ez',\n                int: '--ei',\n                float: '--ef',\n                uri: '--eu',\n                component: '--ecn',\n                'String[]': '--esa',\n                'int[]': '--eia',\n                'long[]': '--ela',\n                'float[]': '--efa',\n            };\n            let extraCommands = [];\n            extra.forEach(item => {\n                if (item.type in typeMap) {\n                    extraCommands.push(typeMap[item.type]);\n                    extraCommands.push(item.key);\n                    if (item.type.endsWith('[]')) {\n                        extraCommands.push(item.value.join(','));\n                    }\n                    else {\n                        extraCommands.push(item.value);\n                    }\n                }\n            });\n            return extraCommands;\n        }\n        if (extra) {\n            commandArray.push(parseExtra(extra).join(' '));\n        }\n        const { result, err } = await this._commandFactory(commandArray.join(' '));\n        return { result, err };\n    }\n    async exeCommand(command) {\n        return await this._commandFactory(command);\n    }\n    async getProp(deviceSN) {\n        const { result, err } = await this._commandFactory(`adb -s ${deviceSN} shell getprop ro.serialno`);\n        return { result, err };\n    }\n}\nconst adbCommander = new ADBCommander();\nmodule.exports = adbCommander;\n"]}