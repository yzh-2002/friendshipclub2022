{"version":3,"sources":["index.js","lib/compilers.js","lib/utils.js","lib/parsers.js","lib/braces.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,AIZA,AHSA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,ACHA,AENA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;AFOA,AGTA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\n/**\n * Module dependencies\n */\n\nvar toRegex = require('to-regex');\nvar unique = require('array-unique');\nvar extend = require('extend-shallow');\n\n/**\n * Local dependencies\n */\n\nvar compilers = require('./lib/compilers');\nvar parsers = require('./lib/parsers');\nvar Braces = require('./lib/braces');\nvar utils = require('./lib/utils');\nvar MAX_LENGTH = 1024 * 64;\nvar cache = {};\n\n/**\n * Convert the given `braces` pattern into a regex-compatible string. By default, only one string is generated for every input string. Set `options.expand` to true to return an array of patterns (similar to Bash or minimatch. Before using `options.expand`, it's recommended that you read the [performance notes](#performance)).\n *\n * ```js\n * var braces = require('braces');\n * console.log(braces('{a,b,c}'));\n * //=> ['(a|b|c)']\n *\n * console.log(braces('{a,b,c}', {expand: true}));\n * //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */\n\nfunction braces(pattern, options) {\n  var key = utils.createKey(String(pattern), options);\n  var arr = [];\n\n  var disabled = options && options.cache === false;\n  if (!disabled && cache.hasOwnProperty(key)) {\n    return cache[key];\n  }\n\n  if (Array.isArray(pattern)) {\n    for (var i = 0; i < pattern.length; i++) {\n      arr.push.apply(arr, braces.create(pattern[i], options));\n    }\n  } else {\n    arr = braces.create(pattern, options);\n  }\n\n  if (options && options.nodupes === true) {\n    arr = unique(arr);\n  }\n\n  if (!disabled) {\n    cache[key] = arr;\n  }\n  return arr;\n}\n\n/**\n * Expands a brace pattern into an array. This method is called by the main [braces](#braces) function when `options.expand` is true. Before using this method it's recommended that you read the [performance notes](#performance)) and advantages of using [.optimize](#optimize) instead.\n *\n * ```js\n * var braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.expand = function(pattern, options) {\n  return braces.create(pattern, extend({}, options, {expand: true}));\n};\n\n/**\n * Expands a brace pattern into a regex-compatible, optimized string. This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * var braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.optimize = function(pattern, options) {\n  return braces.create(pattern, options);\n};\n\n/**\n * Processes a brace pattern and returns either an expanded array (if `options.expand` is true), a highly optimized regex-compatible string. This method is called by the main [braces](#braces) function.\n *\n * ```js\n * var braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */\n\nbraces.create = function(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  var maxLength = (options && options.maxLength) || MAX_LENGTH;\n  if (pattern.length >= maxLength) {\n    throw new Error('expected pattern to be less than ' + maxLength + ' characters');\n  }\n\n  function create() {\n    if (pattern === '' || pattern.length < 3) {\n      return [pattern];\n    }\n\n    if (utils.isEmptySets(pattern)) {\n      return [];\n    }\n\n    if (utils.isQuotedString(pattern)) {\n      return [pattern.slice(1, -1)];\n    }\n\n    var proto = new Braces(options);\n    var result = !options || options.expand !== true\n      ? proto.optimize(pattern, options)\n      : proto.expand(pattern, options);\n\n    // get the generated pattern(s)\n    var arr = result.output;\n\n    // filter out empty strings if specified\n    if (options && options.noempty === true) {\n      arr = arr.filter(Boolean);\n    }\n\n    // filter out duplicates if specified\n    if (options && options.nodupes === true) {\n      arr = unique(arr);\n    }\n\n    Object.defineProperty(arr, 'result', {\n      enumerable: false,\n      value: result\n    });\n\n    return arr;\n  }\n\n  return memoize('create', pattern, options, create);\n};\n\n/**\n * Create a regular expression from the given string `pattern`.\n *\n * ```js\n * var braces = require('braces');\n *\n * console.log(braces.makeRe('id-{200..300}'));\n * //=> /^(?:id-(20[0-9]|2[1-9][0-9]|300))$/\n * ```\n * @param {String} `pattern` The pattern to convert to regex.\n * @param {Object} `options`\n * @return {RegExp}\n * @api public\n */\n\nbraces.makeRe = function(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('expected a string');\n  }\n\n  var maxLength = (options && options.maxLength) || MAX_LENGTH;\n  if (pattern.length >= maxLength) {\n    throw new Error('expected pattern to be less than ' + maxLength + ' characters');\n  }\n\n  function makeRe() {\n    var arr = braces(pattern, options);\n    var opts = extend({strictErrors: false}, options);\n    return toRegex(arr, opts);\n  }\n\n  return memoize('makeRe', pattern, options, makeRe);\n};\n\n/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * var braces = require('braces');\n * var ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * // { type: 'root',\n * //   errors: [],\n * //   input: 'a/{b,c}/d',\n * //   nodes:\n * //    [ { type: 'bos', val: '' },\n * //      { type: 'text', val: 'a/' },\n * //      { type: 'brace',\n * //        nodes:\n * //         [ { type: 'brace.open', val: '{' },\n * //           { type: 'text', val: 'b,c' },\n * //           { type: 'brace.close', val: '}' } ] },\n * //      { type: 'text', val: '/d' },\n * //      { type: 'eos', val: '' } ] }\n * ```\n * @param {String} `pattern` Brace pattern to parse\n * @param {Object} `options`\n * @return {Object} Returns an AST\n * @api public\n */\n\nbraces.parse = function(pattern, options) {\n  var proto = new Braces(options);\n  return proto.parse(pattern, options);\n};\n\n/**\n * Compile the given `ast` or string with the given `options`.\n *\n * ```js\n * var braces = require('braces');\n * var ast = braces.parse('a/{b,c}/d');\n * console.log(braces.compile(ast));\n * // { options: { source: 'string' },\n * //   state: {},\n * //   compilers:\n * //    { eos: [Function],\n * //      noop: [Function],\n * //      bos: [Function],\n * //      brace: [Function],\n * //      'brace.open': [Function],\n * //      text: [Function],\n * //      'brace.close': [Function] },\n * //   output: [ 'a/(b|c)/d' ],\n * //   ast:\n * //    { ... },\n * //   parsingErrors: [] }\n * ```\n * @param {Object|String} `ast` AST from [.parse](#parse). If a string is passed it will be parsed first.\n * @param {Object} `options`\n * @return {Object} Returns an object that has an `output` property with the compiled string.\n * @api public\n */\n\nbraces.compile = function(ast, options) {\n  var proto = new Braces(options);\n  return proto.compile(ast, options);\n};\n\n/**\n * Clear the regex cache.\n *\n * ```js\n * braces.clearCache();\n * ```\n * @api public\n */\n\nbraces.clearCache = function() {\n  cache = braces.cache = {};\n};\n\n/**\n * Memoize a generated regex or function. A unique key is generated\n * from the method name, pattern, and user-defined options. Set\n * options.memoize to false to disable.\n */\n\nfunction memoize(type, pattern, options, fn) {\n  var key = utils.createKey(type + ':' + pattern, options);\n  var disabled = options && options.cache === false;\n  if (disabled) {\n    braces.clearCache();\n    return fn(pattern, options);\n  }\n\n  if (cache.hasOwnProperty(key)) {\n    return cache[key];\n  }\n\n  var res = fn(pattern, options);\n  cache[key] = res;\n  return res;\n}\n\n/**\n * Expose `Braces` constructor and methods\n * @type {Function}\n */\n\nbraces.Braces = Braces;\nbraces.compilers = compilers;\nbraces.parsers = parsers;\nbraces.cache = cache;\n\n/**\n * Expose `braces`\n * @type {Function}\n */\n\nmodule.exports = braces;\n","\n\nvar utils = require('./utils');\n\nmodule.exports = function(braces, options) {\n  braces.compiler\n\n    /**\n     * bos\n     */\n\n    .set('bos', function() {\n      if (this.output) return;\n      this.ast.queue = isEscaped(this.ast) ? [this.ast.val] : [];\n      this.ast.count = 1;\n    })\n\n    /**\n     * Square brackets\n     */\n\n    .set('bracket', function(node) {\n      var close = node.close;\n      var open = !node.escaped ? '[' : '\\\\[';\n      var negated = node.negated;\n      var inner = node.inner;\n\n      inner = inner.replace(/\\\\(?=[\\\\\\w]|$)/g, '\\\\\\\\');\n      if (inner === ']-') {\n        inner = '\\\\]\\\\-';\n      }\n\n      if (negated && inner.indexOf('.') === -1) {\n        inner += '.';\n      }\n      if (negated && inner.indexOf('/') === -1) {\n        inner += '/';\n      }\n\n      var val = open + negated + inner + close;\n      var queue = node.parent.queue;\n      var last = utils.arrayify(queue.pop());\n\n      queue.push(utils.join(last, val));\n      queue.push.apply(queue, []);\n    })\n\n    /**\n     * Brace\n     */\n\n    .set('brace', function(node) {\n      node.queue = isEscaped(node) ? [node.val] : [];\n      node.count = 1;\n      return this.mapVisit(node.nodes);\n    })\n\n    /**\n     * Open\n     */\n\n    .set('brace.open', function(node) {\n      node.parent.open = node.val;\n    })\n\n    /**\n     * Inner\n     */\n\n    .set('text', function(node) {\n      var queue = node.parent.queue;\n      var escaped = node.escaped;\n      var segs = [node.val];\n\n      if (node.optimize === false) {\n        options = utils.extend({}, options, {optimize: false});\n      }\n\n      if (node.multiplier > 1) {\n        node.parent.count *= node.multiplier;\n      }\n\n      if (options.quantifiers === true && utils.isQuantifier(node.val)) {\n        escaped = true;\n\n      } else if (node.val.length > 1) {\n        if (isType(node.parent, 'brace') && !isEscaped(node)) {\n          var expanded = utils.expand(node.val, options);\n          segs = expanded.segs;\n\n          if (expanded.isOptimized) {\n            node.parent.isOptimized = true;\n          }\n\n          // if nothing was expanded, we probably have a literal brace\n          if (!segs.length) {\n            var val = (expanded.val || node.val);\n            if (options.unescape !== false) {\n              // unescape unexpanded brace sequence/set separators\n              val = val.replace(/\\\\([,.])/g, '$1');\n              // strip quotes\n              val = val.replace(/[\"'`]/g, '');\n            }\n\n            segs = [val];\n            escaped = true;\n          }\n        }\n\n      } else if (node.val === ',') {\n        if (options.expand) {\n          node.parent.queue.push(['']);\n          segs = [''];\n        } else {\n          segs = ['|'];\n        }\n      } else {\n        escaped = true;\n      }\n\n      if (escaped && isType(node.parent, 'brace')) {\n        if (node.parent.nodes.length <= 4 && node.parent.count === 1) {\n          node.parent.escaped = true;\n        } else if (node.parent.length <= 3) {\n          node.parent.escaped = true;\n        }\n      }\n\n      if (!hasQueue(node.parent)) {\n        node.parent.queue = segs;\n        return;\n      }\n\n      var last = utils.arrayify(queue.pop());\n      if (node.parent.count > 1 && options.expand) {\n        last = multiply(last, node.parent.count);\n        node.parent.count = 1;\n      }\n\n      queue.push(utils.join(utils.flatten(last), segs.shift()));\n      queue.push.apply(queue, segs);\n    })\n\n    /**\n     * Close\n     */\n\n    .set('brace.close', function(node) {\n      var queue = node.parent.queue;\n      var prev = node.parent.parent;\n      var last = prev.queue.pop();\n      var open = node.parent.open;\n      var close = node.val;\n\n      if (open && close && isOptimized(node, options)) {\n        open = '(';\n        close = ')';\n      }\n\n      // if a close brace exists, and the previous segment is one character\n      // don't wrap the result in braces or parens\n      var ele = utils.last(queue);\n      if (node.parent.count > 1 && options.expand) {\n        ele = multiply(queue.pop(), node.parent.count);\n        node.parent.count = 1;\n        queue.push(ele);\n      }\n\n      if (close && typeof ele === 'string' && ele.length === 1) {\n        open = '';\n        close = '';\n      }\n\n      if ((isLiteralBrace(node, options) || noInner(node)) && !node.parent.hasEmpty) {\n        queue.push(utils.join(open, queue.pop() || ''));\n        queue = utils.flatten(utils.join(queue, close));\n      }\n\n      if (typeof last === 'undefined') {\n        prev.queue = [queue];\n      } else {\n        prev.queue.push(utils.flatten(utils.join(last, queue)));\n      }\n    })\n\n    /**\n     * eos\n     */\n\n    .set('eos', function(node) {\n      if (this.input) return;\n\n      if (options.optimize !== false) {\n        this.output = utils.last(utils.flatten(this.ast.queue));\n      } else if (Array.isArray(utils.last(this.ast.queue))) {\n        this.output = utils.flatten(this.ast.queue.pop());\n      } else {\n        this.output = utils.flatten(this.ast.queue);\n      }\n\n      if (node.parent.count > 1 && options.expand) {\n        this.output = multiply(this.output, node.parent.count);\n      }\n\n      this.output = utils.arrayify(this.output);\n      this.ast.queue = [];\n    });\n\n};\n\n/**\n * Multiply the segments in the current brace level\n */\n\nfunction multiply(queue, n, options) {\n  return utils.flatten(utils.repeat(utils.arrayify(queue), n));\n}\n\n/**\n * Return true if `node` is escaped\n */\n\nfunction isEscaped(node) {\n  return node.escaped === true;\n}\n\n/**\n * Returns true if regex parens should be used for sets. If the parent `type`\n * is not `brace`, then we're on a root node, which means we should never\n * expand segments and open/close braces should be `{}` (since this indicates\n * a brace is missing from the set)\n */\n\nfunction isOptimized(node, options) {\n  if (node.parent.isOptimized) return true;\n  return isType(node.parent, 'brace')\n    && !isEscaped(node.parent)\n    && options.expand !== true;\n}\n\n/**\n * Returns true if the value in `node` should be wrapped in a literal brace.\n * @return {Boolean}\n */\n\nfunction isLiteralBrace(node, options) {\n  return isEscaped(node.parent) || options.optimize !== false;\n}\n\n/**\n * Returns true if the given `node` does not have an inner value.\n * @return {Boolean}\n */\n\nfunction noInner(node, type) {\n  if (node.parent.queue.length === 1) {\n    return true;\n  }\n  var nodes = node.parent.nodes;\n  return nodes.length === 3\n    && isType(nodes[0], 'brace.open')\n    && !isType(nodes[1], 'text')\n    && isType(nodes[2], 'brace.close');\n}\n\n/**\n * Returns true if the given `node` is the given `type`\n * @return {Boolean}\n */\n\nfunction isType(node, type) {\n  return typeof node !== 'undefined' && node.type === type;\n}\n\n/**\n * Returns true if the given `node` has a non-empty queue.\n * @return {Boolean}\n */\n\nfunction hasQueue(node) {\n  return Array.isArray(node.queue) && node.queue.length;\n}\n","\n\nvar splitString = require('split-string');\nvar utils = module.exports;\n\n/**\n * Module dependencies\n */\n\nutils.extend = require('extend-shallow');\nutils.flatten = require('arr-flatten');\nutils.isObject = require('isobject');\nutils.fillRange = require('fill-range');\nutils.repeat = require('repeat-element');\nutils.unique = require('array-unique');\n\nutils.define = function(obj, key, val) {\n  Object.defineProperty(obj, key, {\n    writable: true,\n    configurable: true,\n    enumerable: false,\n    value: val\n  });\n};\n\n/**\n * Returns true if the given string contains only empty brace sets.\n */\n\nutils.isEmptySets = function(str) {\n  return /^(?:\\{,\\})+$/.test(str);\n};\n\n/**\n * Returns true if the given string contains only empty brace sets.\n */\n\nutils.isQuotedString = function(str) {\n  var open = str.charAt(0);\n  if (open === '\\'' || open === '\"' || open === '`') {\n    return str.slice(-1) === open;\n  }\n  return false;\n};\n\n/**\n * Create the key to use for memoization. The unique key is generated\n * by iterating over the options and concatenating key-value pairs\n * to the pattern string.\n */\n\nutils.createKey = function(pattern, options) {\n  var id = pattern;\n  if (typeof options === 'undefined') {\n    return id;\n  }\n  var keys = Object.keys(options);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    id += ';' + key + '=' + String(options[key]);\n  }\n  return id;\n};\n\n/**\n * Normalize options\n */\n\nutils.createOptions = function(options) {\n  var opts = utils.extend.apply(null, arguments);\n  if (typeof opts.expand === 'boolean') {\n    opts.optimize = !opts.expand;\n  }\n  if (typeof opts.optimize === 'boolean') {\n    opts.expand = !opts.optimize;\n  }\n  if (opts.optimize === true) {\n    opts.makeRe = true;\n  }\n  return opts;\n};\n\n/**\n * Join patterns in `a` to patterns in `b`\n */\n\nutils.join = function(a, b, options) {\n  options = options || {};\n  a = utils.arrayify(a);\n  b = utils.arrayify(b);\n\n  if (!a.length) return b;\n  if (!b.length) return a;\n\n  var len = a.length;\n  var idx = -1;\n  var arr = [];\n\n  while (++idx < len) {\n    var val = a[idx];\n    if (Array.isArray(val)) {\n      for (var i = 0; i < val.length; i++) {\n        val[i] = utils.join(val[i], b, options);\n      }\n      arr.push(val);\n      continue;\n    }\n\n    for (var j = 0; j < b.length; j++) {\n      var bval = b[j];\n\n      if (Array.isArray(bval)) {\n        arr.push(utils.join(val, bval, options));\n      } else {\n        arr.push(val + bval);\n      }\n    }\n  }\n  return arr;\n};\n\n/**\n * Split the given string on `,` if not escaped.\n */\n\nutils.split = function(str, options) {\n  var opts = utils.extend({sep: ','}, options);\n  if (typeof opts.keepQuotes !== 'boolean') {\n    opts.keepQuotes = true;\n  }\n  if (opts.unescape === false) {\n    opts.keepEscaping = true;\n  }\n  return splitString(str, opts, utils.escapeBrackets(opts));\n};\n\n/**\n * Expand ranges or sets in the given `pattern`.\n *\n * @param {String} `str`\n * @param {Object} `options`\n * @return {Object}\n */\n\nutils.expand = function(str, options) {\n  var opts = utils.extend({rangeLimit: 10000}, options);\n  var segs = utils.split(str, opts);\n  var tok = { segs: segs };\n\n  if (utils.isQuotedString(str)) {\n    return tok;\n  }\n\n  if (opts.rangeLimit === true) {\n    opts.rangeLimit = 10000;\n  }\n\n  if (segs.length > 1) {\n    if (opts.optimize === false) {\n      tok.val = segs[0];\n      return tok;\n    }\n\n    tok.segs = utils.stringifyArray(tok.segs);\n  } else if (segs.length === 1) {\n    var arr = str.split('..');\n\n    if (arr.length === 1) {\n      tok.val = tok.segs[tok.segs.length - 1] || tok.val || str;\n      tok.segs = [];\n      return tok;\n    }\n\n    if (arr.length === 2 && arr[0] === arr[1]) {\n      tok.escaped = true;\n      tok.val = arr[0];\n      tok.segs = [];\n      return tok;\n    }\n\n    if (arr.length > 1) {\n      if (opts.optimize !== false) {\n        opts.optimize = true;\n        delete opts.expand;\n      }\n\n      if (opts.optimize !== true) {\n        var min = Math.min(arr[0], arr[1]);\n        var max = Math.max(arr[0], arr[1]);\n        var step = arr[2] || 1;\n\n        if (opts.rangeLimit !== false && ((max - min) / step >= opts.rangeLimit)) {\n          throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\n        }\n      }\n\n      arr.push(opts);\n      tok.segs = utils.fillRange.apply(null, arr);\n\n      if (!tok.segs.length) {\n        tok.escaped = true;\n        tok.val = str;\n        return tok;\n      }\n\n      if (opts.optimize === true) {\n        tok.segs = utils.stringifyArray(tok.segs);\n      }\n\n      if (tok.segs === '') {\n        tok.val = str;\n      } else {\n        tok.val = tok.segs[0];\n      }\n      return tok;\n    }\n  } else {\n    tok.val = str;\n  }\n  return tok;\n};\n\n/**\n * Ensure commas inside brackets and parens are not split.\n * @param {Object} `tok` Token from the `split-string` module\n * @return {undefined}\n */\n\nutils.escapeBrackets = function(options) {\n  return function(tok) {\n    if (tok.escaped && tok.val === 'b') {\n      tok.val = '\\\\b';\n      return;\n    }\n\n    if (tok.val !== '(' && tok.val !== '[') return;\n    var opts = utils.extend({}, options);\n    var brackets = [];\n    var parens = [];\n    var stack = [];\n    var val = tok.val;\n    var str = tok.str;\n    var i = tok.idx - 1;\n\n    while (++i < str.length) {\n      var ch = str[i];\n\n      if (ch === '\\\\') {\n        val += (opts.keepEscaping === false ? '' : ch) + str[++i];\n        continue;\n      }\n\n      if (ch === '(') {\n        parens.push(ch);\n        stack.push(ch);\n      }\n\n      if (ch === '[') {\n        brackets.push(ch);\n        stack.push(ch);\n      }\n\n      if (ch === ')') {\n        parens.pop();\n        stack.pop();\n        if (!stack.length) {\n          val += ch;\n          break;\n        }\n      }\n\n      if (ch === ']') {\n        brackets.pop();\n        stack.pop();\n        if (!stack.length) {\n          val += ch;\n          break;\n        }\n      }\n      val += ch;\n    }\n\n    tok.split = false;\n    tok.val = val.slice(1);\n    tok.idx = i;\n  };\n};\n\n/**\n * Returns true if the given string looks like a regex quantifier\n * @return {Boolean}\n */\n\nutils.isQuantifier = function(str) {\n  return /^(?:[0-9]?,[0-9]|[0-9],)$/.test(str);\n};\n\n/**\n * Cast `val` to an array.\n * @param {*} `val`\n */\n\nutils.stringifyArray = function(arr) {\n  return [utils.arrayify(arr).join('|')];\n};\n\n/**\n * Cast `val` to an array.\n * @param {*} `val`\n */\n\nutils.arrayify = function(arr) {\n  if (typeof arr === 'undefined') {\n    return [];\n  }\n  if (typeof arr === 'string') {\n    return [arr];\n  }\n  return arr;\n};\n\n/**\n * Returns true if the given `str` is a non-empty string\n * @return {Boolean}\n */\n\nutils.isString = function(str) {\n  return str != null && typeof str === 'string';\n};\n\n/**\n * Get the last element from `array`\n * @param {Array} `array`\n * @return {*}\n */\n\nutils.last = function(arr, n) {\n  return arr[arr.length - (n || 1)];\n};\n\nutils.escapeRegex = function(str) {\n  return str.replace(/\\\\?([!^*?()[\\]{}+?/])/g, '\\\\$1');\n};\n","\n\nvar Node = require('snapdragon-node');\nvar utils = require('./utils');\n\n/**\n * Braces parsers\n */\n\nmodule.exports = function(braces, options) {\n  braces.parser\n    .set('bos', function() {\n      if (!this.parsed) {\n        this.ast = this.nodes[0] = new Node(this.ast);\n      }\n    })\n\n    /**\n     * Character parsers\n     */\n\n    .set('escape', function() {\n      var pos = this.position();\n      var m = this.match(/^(?:\\\\(.)|\\$\\{)/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var last = utils.last(prev.nodes);\n\n      var node = pos(new Node({\n        type: 'text',\n        multiplier: 1,\n        val: m[0]\n      }));\n\n      if (node.val === '\\\\\\\\') {\n        return node;\n      }\n\n      if (node.val === '${') {\n        var str = this.input;\n        var idx = -1;\n        var ch;\n\n        while ((ch = str[++idx])) {\n          this.consume(1);\n          node.val += ch;\n          if (ch === '\\\\') {\n            node.val += str[++idx];\n            continue;\n          }\n          if (ch === '}') {\n            break;\n          }\n        }\n      }\n\n      if (this.options.unescape !== false) {\n        node.val = node.val.replace(/\\\\([{}])/g, '$1');\n      }\n\n      if (last.val === '\"' && this.input.charAt(0) === '\"') {\n        last.val = node.val;\n        this.consume(1);\n        return;\n      }\n\n      return concatNodes.call(this, pos, node, prev, options);\n    })\n\n    /**\n     * Brackets: \"[...]\" (basic, this is overridden by\n     * other parsers in more advanced implementations)\n     */\n\n    .set('bracket', function() {\n      var isInside = this.isInside('brace');\n      var pos = this.position();\n      var m = this.match(/^(?:\\[([!^]?)([^\\]]{2,}|\\]-)(\\]|[^*+?]+)|\\[)/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var val = m[0];\n      var negated = m[1] ? '^' : '';\n      var inner = m[2] || '';\n      var close = m[3] || '';\n\n      if (isInside && prev.type === 'brace') {\n        prev.text = prev.text || '';\n        prev.text += val;\n      }\n\n      var esc = this.input.slice(0, 2);\n      if (inner === '' && esc === '\\\\]') {\n        inner += esc;\n        this.consume(2);\n\n        var str = this.input;\n        var idx = -1;\n        var ch;\n\n        while ((ch = str[++idx])) {\n          this.consume(1);\n          if (ch === ']') {\n            close = ch;\n            break;\n          }\n          inner += ch;\n        }\n      }\n\n      return pos(new Node({\n        type: 'bracket',\n        val: val,\n        escaped: close !== ']',\n        negated: negated,\n        inner: inner,\n        close: close\n      }));\n    })\n\n    /**\n     * Empty braces (we capture these early to\n     * speed up processing in the compiler)\n     */\n\n    .set('multiplier', function() {\n      var isInside = this.isInside('brace');\n      var pos = this.position();\n      var m = this.match(/^\\{((?:,|\\{,+\\})+)\\}/);\n      if (!m) return;\n\n      this.multiplier = true;\n      var prev = this.prev();\n      var val = m[0];\n\n      if (isInside && prev.type === 'brace') {\n        prev.text = prev.text || '';\n        prev.text += val;\n      }\n\n      var node = pos(new Node({\n        type: 'text',\n        multiplier: 1,\n        match: m,\n        val: val\n      }));\n\n      return concatNodes.call(this, pos, node, prev, options);\n    })\n\n    /**\n     * Open\n     */\n\n    .set('brace.open', function() {\n      var pos = this.position();\n      var m = this.match(/^\\{(?!(?:[^\\\\}]?|,+)\\})/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var last = utils.last(prev.nodes);\n\n      // if the last parsed character was an extglob character\n      // we need to _not optimize_ the brace pattern because\n      // it might be mistaken for an extglob by a downstream parser\n      if (last && last.val && isExtglobChar(last.val.slice(-1))) {\n        last.optimize = false;\n      }\n\n      var open = pos(new Node({\n        type: 'brace.open',\n        val: m[0]\n      }));\n\n      var node = pos(new Node({\n        type: 'brace',\n        nodes: []\n      }));\n\n      node.push(open);\n      prev.push(node);\n      this.push('brace', node);\n    })\n\n    /**\n     * Close\n     */\n\n    .set('brace.close', function() {\n      var pos = this.position();\n      var m = this.match(/^\\}/);\n      if (!m || !m[0]) return;\n\n      var brace = this.pop('brace');\n      var node = pos(new Node({\n        type: 'brace.close',\n        val: m[0]\n      }));\n\n      if (!this.isType(brace, 'brace')) {\n        if (this.options.strict) {\n          throw new Error('missing opening \"{\"');\n        }\n        node.type = 'text';\n        node.multiplier = 0;\n        node.escaped = true;\n        return node;\n      }\n\n      var prev = this.prev();\n      var last = utils.last(prev.nodes);\n      if (last.text) {\n        var lastNode = utils.last(last.nodes);\n        if (lastNode.val === ')' && /[!@*?+]\\(/.test(last.text)) {\n          var open = last.nodes[0];\n          var text = last.nodes[1];\n          if (open.type === 'brace.open' && text && text.type === 'text') {\n            text.optimize = false;\n          }\n        }\n      }\n\n      if (brace.nodes.length > 2) {\n        var first = brace.nodes[1];\n        if (first.type === 'text' && first.val === ',') {\n          brace.nodes.splice(1, 1);\n          brace.nodes.push(first);\n        }\n      }\n\n      brace.push(node);\n    })\n\n    /**\n     * Capture boundary characters\n     */\n\n    .set('boundary', function() {\n      var pos = this.position();\n      var m = this.match(/^[$^](?!\\{)/);\n      if (!m) return;\n      return pos(new Node({\n        type: 'text',\n        val: m[0]\n      }));\n    })\n\n    /**\n     * One or zero, non-comma characters wrapped in braces\n     */\n\n    .set('nobrace', function() {\n      var isInside = this.isInside('brace');\n      var pos = this.position();\n      var m = this.match(/^\\{[^,]?\\}/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var val = m[0];\n\n      if (isInside && prev.type === 'brace') {\n        prev.text = prev.text || '';\n        prev.text += val;\n      }\n\n      return pos(new Node({\n        type: 'text',\n        multiplier: 0,\n        val: val\n      }));\n    })\n\n    /**\n     * Text\n     */\n\n    .set('text', function() {\n      var isInside = this.isInside('brace');\n      var pos = this.position();\n      var m = this.match(/^((?!\\\\)[^${}[\\]])+/);\n      if (!m) return;\n\n      var prev = this.prev();\n      var val = m[0];\n\n      if (isInside && prev.type === 'brace') {\n        prev.text = prev.text || '';\n        prev.text += val;\n      }\n\n      var node = pos(new Node({\n        type: 'text',\n        multiplier: 1,\n        val: val\n      }));\n\n      return concatNodes.call(this, pos, node, prev, options);\n    });\n};\n\n/**\n * Returns true if the character is an extglob character.\n */\n\nfunction isExtglobChar(ch) {\n  return ch === '!' || ch === '@' || ch === '*' || ch === '?' || ch === '+';\n}\n\n/**\n * Combine text nodes, and calculate empty sets (`{,,}`)\n * @param {Function} `pos` Function to calculate node position\n * @param {Object} `node` AST node\n * @return {Object}\n */\n\nfunction concatNodes(pos, node, parent, options) {\n  node.orig = node.val;\n  var prev = this.prev();\n  var last = utils.last(prev.nodes);\n  var isEscaped = false;\n\n  if (node.val.length > 1) {\n    var a = node.val.charAt(0);\n    var b = node.val.slice(-1);\n\n    isEscaped = (a === '\"' && b === '\"')\n      || (a === \"'\" && b === \"'\")\n      || (a === '`' && b === '`');\n  }\n\n  if (isEscaped && options.unescape !== false) {\n    node.val = node.val.slice(1, node.val.length - 1);\n    node.escaped = true;\n  }\n\n  if (node.match) {\n    var match = node.match[1];\n    if (!match || match.indexOf('}') === -1) {\n      match = node.match[0];\n    }\n\n    // replace each set with a single \",\"\n    var val = match.replace(/\\{/g, ',').replace(/\\}/g, '');\n    node.multiplier *= val.length;\n    node.val = '';\n  }\n\n  var simpleText = last.type === 'text'\n    && last.multiplier === 1\n    && node.multiplier === 1\n    && node.val;\n\n  if (simpleText) {\n    last.val += node.val;\n    return;\n  }\n\n  prev.push(node);\n}\n","\n\nvar extend = require('extend-shallow');\nvar Snapdragon = require('snapdragon');\nvar compilers = require('./compilers');\nvar parsers = require('./parsers');\nvar utils = require('./utils');\n\n/**\n * Customize Snapdragon parser and renderer\n */\n\nfunction Braces(options) {\n  this.options = extend({}, options);\n}\n\n/**\n * Initialize braces\n */\n\nBraces.prototype.init = function(options) {\n  if (this.isInitialized) return;\n  this.isInitialized = true;\n  var opts = utils.createOptions({}, this.options, options);\n  this.snapdragon = this.options.snapdragon || new Snapdragon(opts);\n  this.compiler = this.snapdragon.compiler;\n  this.parser = this.snapdragon.parser;\n\n  compilers(this.snapdragon, opts);\n  parsers(this.snapdragon, opts);\n\n  /**\n   * Call Snapdragon `.parse` method. When AST is returned, we check to\n   * see if any unclosed braces are left on the stack and, if so, we iterate\n   * over the stack and correct the AST so that compilers are called in the correct\n   * order and unbalance braces are properly escaped.\n   */\n\n  utils.define(this.snapdragon, 'parse', function(pattern, options) {\n    var parsed = Snapdragon.prototype.parse.apply(this, arguments);\n    this.parser.ast.input = pattern;\n\n    var stack = this.parser.stack;\n    while (stack.length) {\n      addParent({type: 'brace.close', val: ''}, stack.pop());\n    }\n\n    function addParent(node, parent) {\n      utils.define(node, 'parent', parent);\n      parent.nodes.push(node);\n    }\n\n    // add non-enumerable parser reference\n    utils.define(parsed, 'parser', this.parser);\n    return parsed;\n  });\n};\n\n/**\n * Decorate `.parse` method\n */\n\nBraces.prototype.parse = function(ast, options) {\n  if (ast && typeof ast === 'object' && ast.nodes) return ast;\n  this.init(options);\n  return this.snapdragon.parse(ast, options);\n};\n\n/**\n * Decorate `.compile` method\n */\n\nBraces.prototype.compile = function(ast, options) {\n  if (typeof ast === 'string') {\n    ast = this.parse(ast, options);\n  } else {\n    this.init(options);\n  }\n  return this.snapdragon.compile(ast, options);\n};\n\n/**\n * Expand\n */\n\nBraces.prototype.expand = function(pattern) {\n  var ast = this.parse(pattern, {expand: true});\n  return this.compile(ast, {expand: true});\n};\n\n/**\n * Optimize\n */\n\nBraces.prototype.optimize = function(pattern) {\n  var ast = this.parse(pattern, {optimize: true});\n  return this.compile(ast, {optimize: true});\n};\n\n/**\n * Expose `Braces`\n */\n\nmodule.exports = Braces;\n"]}