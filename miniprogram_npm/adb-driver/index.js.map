{"version":3,"sources":["AdbDriver.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path = require(\"path\");\nconst child_process_1 = require(\"child_process\");\nconst which = require(\"which\");\nconst base = path.resolve(__dirname, '..', 'bin');\nexports.ADB_BINARY_FILE = {\n    win32: path.resolve(base, 'window/adb.exe'),\n    darwin: path.resolve(base, 'mac/adb'),\n    linux: path.resolve(base, 'linux/adb'),\n};\nfunction isSystemAdbAvailable() {\n    return !!which.sync('adb', { nothrow: true });\n}\nexports.isSystemAdbAvailable = isSystemAdbAvailable;\nlet systemAdbExist = isSystemAdbAvailable();\nfunction execADBCommand(command, option) {\n    let execCmd = command;\n    if (!systemAdbExist) {\n        let cmd = command.split(' ');\n        const binFile = exports.ADB_BINARY_FILE[process.platform];\n        cmd[0] = `\"${binFile}\"`;\n        execCmd = cmd.join(' ');\n    }\n    return new Promise((resolve, reject) => {\n        child_process_1.exec(execCmd, option || { stdio: 'inherit' }, (err, stdout, stderr) => {\n            if (err) {\n                reject(err);\n            }\n            resolve(stdout);\n        });\n    }).catch(err => {\n        return err;\n    });\n}\nexports.execADBCommand = execADBCommand;\n"]}