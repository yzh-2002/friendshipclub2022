{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nconst debug = require('debug')('koa-mount')\nconst compose = require('koa-compose')\nconst assert = require('assert')\n\n/**\n * Expose `mount()`.\n */\n\nmodule.exports = mount\n\n/**\n * Mount `app` with `prefix`, `app`\n * may be a Koa application or\n * middleware function.\n *\n * @param {String|Application|Function} prefix, app, or function\n * @param {Application|Function} [app or function]\n * @return {Function}\n * @api public\n */\n\nfunction mount (prefix, app) {\n  if (typeof prefix !== 'string') {\n    app = prefix\n    prefix = '/'\n  }\n\n  assert.equal(prefix[0], '/', 'mount path must begin with \"/\"')\n\n  // compose\n  const downstream = app.middleware\n    ? compose(app.middleware)\n    : app\n\n  // don't need to do mounting here\n  if (prefix === '/') return downstream\n\n  const trailingSlash = prefix.slice(-1) === '/'\n\n  const name = app.name || 'unnamed'\n  debug('mount %s %s', prefix, name)\n\n  return async function (ctx, upstream) {\n    const prev = ctx.path\n    const newPath = match(prev)\n    debug('mount %s %s -> %s', prefix, name, newPath)\n    if (!newPath) return await upstream()\n\n    ctx.mountPath = prefix\n    ctx.path = newPath\n    debug('enter %s -> %s', prev, ctx.path)\n\n    await downstream(ctx, async () => {\n      ctx.path = prev\n      await upstream()\n      ctx.path = newPath\n    })\n\n    debug('leave %s -> %s', prev, ctx.path)\n    ctx.path = prev\n  }\n\n  /**\n   * Check if `prefix` satisfies a `path`.\n   * Returns the new path.\n   *\n   * match('/images/', '/lkajsldkjf') => false\n   * match('/images', '/images') => /\n   * match('/images/', '/images') => false\n   * match('/images/', '/images/asdf') => /asdf\n   *\n   * @param {String} prefix\n   * @param {String} path\n   * @return {String|Boolean}\n   * @api private\n   */\n\n  function match (path) {\n    // does not match prefix at all\n    if (path.indexOf(prefix) !== 0) return false\n\n    const newPath = path.replace(prefix, '') || '/'\n    if (trailingSlash) return newPath\n\n    // `/mount` does not match `/mountlkjalskjdf`\n    if (newPath[0] !== '/') return false\n    return newPath\n  }\n}\n"]}