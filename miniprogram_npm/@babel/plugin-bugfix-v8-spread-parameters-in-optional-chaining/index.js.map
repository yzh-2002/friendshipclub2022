{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\nvar pluginProposalOptionalChaining = require('@babel/plugin-proposal-optional-chaining');\nvar helperSkipTransparentExpressionWrappers = require('@babel/helper-skip-transparent-expression-wrappers');\nvar core = require('@babel/core');\n\nfunction matchAffectedArguments(argumentNodes) {\n  const spreadIndex = argumentNodes.findIndex(node => core.types.isSpreadElement(node));\n  return spreadIndex >= 0 && spreadIndex !== argumentNodes.length - 1;\n}\n\nfunction shouldTransform(path) {\n  let optionalPath = path;\n  const chains = [];\n\n  while (optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression()) {\n    const {\n      node\n    } = optionalPath;\n    chains.push(node);\n\n    if (optionalPath.isOptionalMemberExpression()) {\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"object\"));\n    } else if (optionalPath.isOptionalCallExpression()) {\n      optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get(\"callee\"));\n    }\n  }\n\n  for (let i = 0; i < chains.length; i++) {\n    const node = chains[i];\n\n    if (core.types.isOptionalCallExpression(node) && matchAffectedArguments(node.arguments)) {\n      if (node.optional) {\n        return true;\n      }\n\n      const callee = chains[i + 1];\n\n      if (core.types.isOptionalMemberExpression(callee, {\n        optional: true\n      })) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nvar index = helperPluginUtils.declare(api => {\n  api.assertVersion(7);\n  const noDocumentAll = api.assumption(\"noDocumentAll\");\n  const pureGetters = api.assumption(\"pureGetters\");\n  return {\n    name: \"bugfix-v8-spread-parameters-in-optional-chaining\",\n    visitor: {\n      \"OptionalCallExpression|OptionalMemberExpression\"(path) {\n        if (shouldTransform(path)) {\n          pluginProposalOptionalChaining.transform(path, {\n            noDocumentAll,\n            pureGetters\n          });\n        }\n      }\n\n    }\n  };\n});\n\nexports.default = index;\n//# sourceMappingURL=index.js.map\n"]}