{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(api => {\n  api.assertVersion(7);\n  const surrogate = /[\\ud800-\\udfff]/g;\n  const unicodeEscape = /(\\\\+)u\\{([0-9a-fA-F]+)\\}/g;\n\n  function escape(code) {\n    let str = code.toString(16);\n\n    while (str.length < 4) str = \"0\" + str;\n\n    return \"\\\\u\" + str;\n  }\n\n  function replacer(match, backslashes, code) {\n    if (backslashes.length % 2 === 0) {\n      return match;\n    }\n\n    const char = String.fromCodePoint(parseInt(code, 16));\n    const escaped = backslashes.slice(0, -1) + escape(char.charCodeAt(0));\n    return char.length === 1 ? escaped : escaped + escape(char.charCodeAt(1));\n  }\n\n  function replaceUnicodeEscapes(str) {\n    return str.replace(unicodeEscape, replacer);\n  }\n\n  function getUnicodeEscape(str) {\n    let match;\n\n    while (match = unicodeEscape.exec(str)) {\n      if (match[1].length % 2 === 0) continue;\n      unicodeEscape.lastIndex = 0;\n      return match[0];\n    }\n\n    return null;\n  }\n\n  return {\n    name: \"transform-unicode-escapes\",\n\n    manipulateOptions({\n      generatorOpts\n    }) {\n      var _generatorOpts$jsescO, _generatorOpts$jsescO2;\n\n      if (!generatorOpts.jsescOption) {\n        generatorOpts.jsescOption = {};\n      }\n\n      (_generatorOpts$jsescO2 = (_generatorOpts$jsescO = generatorOpts.jsescOption).minimal) != null ? _generatorOpts$jsescO2 : _generatorOpts$jsescO.minimal = false;\n    },\n\n    visitor: {\n      Identifier(path) {\n        const {\n          node,\n          key\n        } = path;\n        const {\n          name\n        } = node;\n        const replaced = name.replace(surrogate, c => {\n          return `_u${c.charCodeAt(0).toString(16)}`;\n        });\n        if (name === replaced) return;\n\n        const str = _core.types.inherits(_core.types.stringLiteral(name), node);\n\n        if (key === \"key\") {\n          path.replaceWith(str);\n          return;\n        }\n\n        const {\n          parentPath,\n          scope\n        } = path;\n\n        if (parentPath.isMemberExpression({\n          property: node\n        }) || parentPath.isOptionalMemberExpression({\n          property: node\n        })) {\n          parentPath.node.computed = true;\n          path.replaceWith(str);\n          return;\n        }\n\n        const binding = scope.getBinding(name);\n\n        if (binding) {\n          scope.rename(name, scope.generateUid(replaced));\n          return;\n        }\n\n        throw path.buildCodeFrameError(`Can't reference '${name}' as a bare identifier`);\n      },\n\n      \"StringLiteral|DirectiveLiteral\"(path) {\n        const {\n          node\n        } = path;\n        const {\n          extra\n        } = node;\n        if (extra != null && extra.raw) extra.raw = replaceUnicodeEscapes(extra.raw);\n      },\n\n      TemplateElement(path) {\n        const {\n          node,\n          parentPath\n        } = path;\n        const {\n          value\n        } = node;\n        const firstEscape = getUnicodeEscape(value.raw);\n        if (!firstEscape) return;\n        const grandParent = parentPath.parentPath;\n\n        if (grandParent.isTaggedTemplateExpression()) {\n          throw path.buildCodeFrameError(`Can't replace Unicode escape '${firstEscape}' inside tagged template literals. You can enable '@babel/plugin-transform-template-literals' to compile them to classic strings.`);\n        }\n\n        value.raw = replaceUnicodeEscapes(value.raw);\n      }\n\n    }\n  };\n});\n\nexports.default = _default;"]}