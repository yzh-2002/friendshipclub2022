{"version":3,"sources":["AdbDevicesEmitter.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nconst EventEmitter = require(\"events\");\nconst util_1 = require(\"util\");\nconst adbCommander = require(\"adb-commander\");\nconst debugAdb = util_1.debuglog('adb');\nclass ADBDevicesEmitter extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._stopFlag = false;\n        this._builtinEvents = ['deviceAdded', 'deviceRemoved'];\n        this._snList = [];\n    }\n    addEventListener(eventType, listener) {\n        debugAdb(`addEventListener(): start for ${eventType}`);\n        const idx = this._builtinEvents.indexOf(eventType);\n        if (idx >= 0) {\n            this.on(eventType, listener);\n        }\n    }\n    start() {\n        debugAdb(`start(): start`);\n        this._stopFlag = false;\n        this._execPolling(async (resolve) => {\n            debugAdb(`execPolling(): callback start`);\n            const { deviceList, err } = await adbCommander.deviceList();\n            debugAdb(`execPolling():\\nfound deviceList: ${JSON.stringify(deviceList)},\\n_snList: ${JSON.stringify(this._snList)}`);\n            if (err) {\n                console.error(`adb-commander: adb获取手机设备失败`, JSON.stringify(err));\n                return resolve(true);\n            }\n            const deviceListState = this._detectDeviceListChange(deviceList);\n            debugAdb(`execPolling():\\nnewlyAdded devices: ${JSON.stringify(deviceListState.newlyAdded)}\\nremoved devices: ${JSON.stringify(deviceListState.removed)}`);\n            deviceListState.newlyAdded.forEach(sn => {\n                this.emit('deviceAdded', { sn });\n            });\n            deviceListState.removed.forEach(sn => {\n                this.emit('deviceRemoved', { sn });\n            });\n            debugAdb(`execPolling(): go to next polling`);\n            return resolve(true);\n        });\n    }\n    stop() {\n        this._stopFlag = true;\n    }\n    _detectDeviceListChange(currentList) {\n        const result = {\n            newlyAdded: [],\n            removed: [],\n        };\n        result.newlyAdded = currentList.filter(item => {\n            return this._snList.indexOf(item) < 0;\n        });\n        result.removed = this._snList.filter(item => {\n            return currentList.indexOf(item) < 0;\n        });\n        this._snList = currentList;\n        return result;\n    }\n    _execPolling(callback) {\n        const delay = 5e3;\n        const polling = () => {\n            new Promise((res, rej) => {\n                debugAdb(`execPolling(): promise def start`);\n                callback.apply(this, [res, rej]);\n            })\n                .then(next => {\n                next &&\n                    !this._stopFlag &&\n                    setTimeout(() => {\n                        debugAdb(`execPolling(): start polling again`);\n                        polling();\n                    }, delay);\n            })\n                .catch(err => {\n                console.error(`adb-commander: 退出轮询: ${err.message}`);\n            });\n        };\n        polling();\n    }\n}\nconst adbDevicesEmitter = new ADBDevicesEmitter();\nmodule.exports = adbDevicesEmitter;\n"]}