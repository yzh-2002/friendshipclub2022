{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nrequire('shelljs/global');\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\n\nconst platform = os.platform();\nconst aapt = path.join(__dirname, 'bin', platform , 'aapt');\n\nif (platform === 'linux') {\n\tfs.chmodSync(aapt, '777')\t\n}\n\nfunction promistify(cmd, callback) {\n\tcallback = callback || function () {};\n\treturn new Promise((resolve, reject) => {\n\t\texec(cmd, (code, stdout, stderr) => {\n      if (code !== 0) {\n        reject(stderr);\n        callback(stderr, null);\n      } else {\n      \tresolve(stdout);\n      \tcallback(null, stdout);\n      }\n\t\t})\n\t});\n}\n\nfunction list(apkfilePath, callback) {\n\treturn promistify(`${aapt} l ${apkfilePath}`, callback);\n}\n\nfunction dump(what, apkfilePath, callback) {\n\treturn promistify(`${aapt} d ${what} ${apkfilePath}`, callback);\n}\n\nfunction packageCmd(command, callback) {\n\treturn promistify(`${aapt} p ${command}`, callback);\n}\n\nfunction remove(apkfilePath, files, callback) {\n\tif (!Array.isArray(files)) {\n\t\tfiles = [files]\n\t}\n\tconst removeFiles = files.join(' ')\n\treturn promistify(`${aapt} r ${apkfilePath} ${removeFiles}`, callback);\n}\n\nfunction add(apkfilePath, files, callback) {\n\tif (!Array.isArray(files)) {\n\t\tfiles = [files]\n\t}\n\tconst addFiles = files.join(' ')\n\treturn promistify(`${aapt} a ${apkfilePath} ${addFiles}`, callback);\n}\n\nfunction crunch(resource, outputFolder, callback) {\n\tif (!Array.isArray(resource)) {\n\t\tresource = [resource]\n\t}\n\tconst resourceSources = resource.join(' ')\n\treturn promistify(`${aapt} c -S ${resourceSources} -C ${outputFolder}`, callback);\n}\n\nfunction singleCrunch(inputFile, outputfile, callback) {\n\treturn promistify(`${aapt} s -i ${inputFile} -o ${outputfile}`, callback);\n}\n\nfunction version(callback) {\n\treturn promistify(`${aapt} v`, callback);\n}\n\nmodule.exports = {\n\tlist: list,\n\tdump: dump,\n\tpackageCmd: packageCmd,\n\tremove: remove,\n\tadd: add,\n\tcrunch: crunch,\n\tsingleCrunch: singleCrunch,\n\tversion: version\n}\n"]}