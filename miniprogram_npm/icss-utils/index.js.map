{"version":3,"sources":["index.js","replaceValueSymbols.js","replaceSymbols.js","extractICSS.js","createICSSRules.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AELA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA,ADGA;AGRA,ADGA,AHSA,AENA;AELA,ADGA,AHSA,AENA;AELA,ADGA,AHSA,AENA;AELA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA,AHSA;AIXA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"replaceValueSymbols\", {\n  enumerable: true,\n  get: function get() {\n    return _replaceValueSymbols.default;\n  }\n});\nObject.defineProperty(exports, \"replaceSymbols\", {\n  enumerable: true,\n  get: function get() {\n    return _replaceSymbols.default;\n  }\n});\nObject.defineProperty(exports, \"extractICSS\", {\n  enumerable: true,\n  get: function get() {\n    return _extractICSS.default;\n  }\n});\nObject.defineProperty(exports, \"createICSSRules\", {\n  enumerable: true,\n  get: function get() {\n    return _createICSSRules.default;\n  }\n});\n\nvar _replaceValueSymbols = _interopRequireDefault(require(\"./replaceValueSymbols.js\"));\n\nvar _replaceSymbols = _interopRequireDefault(require(\"./replaceSymbols.js\"));\n\nvar _extractICSS = _interopRequireDefault(require(\"./extractICSS.js\"));\n\nvar _createICSSRules = _interopRequireDefault(require(\"./createICSSRules.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst matchValueName = /[$]?[\\w-]+/g;\n\nconst replaceValueSymbols = (value, replacements) => {\n  let matches;\n\n  while (matches = matchValueName.exec(value)) {\n    const replacement = replacements[matches[0]];\n\n    if (replacement) {\n      value = value.slice(0, matches.index) + replacement + value.slice(matchValueName.lastIndex);\n      matchValueName.lastIndex -= matches[0].length - replacement.length;\n    }\n  }\n\n  return value;\n};\n\nvar _default = replaceValueSymbols;\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _replaceValueSymbols = _interopRequireDefault(require(\"./replaceValueSymbols.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst replaceSymbols = (css, replacements) => {\n  css.walk(node => {\n    if (node.type === \"decl\" && node.value) {\n      node.value = (0, _replaceValueSymbols.default)(node.value.toString(), replacements);\n    } else if (node.type === \"rule\" && node.selector) {\n      node.selector = (0, _replaceValueSymbols.default)(node.selector.toString(), replacements);\n    } else if (node.type === \"atrule\" && node.params) {\n      node.params = (0, _replaceValueSymbols.default)(node.params.toString(), replacements);\n    }\n  });\n};\n\nvar _default = replaceSymbols;\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst importPattern = /^:import\\((\"[^\"]*\"|'[^']*'|[^\"']+)\\)$/;\n\nconst getDeclsObject = rule => {\n  const object = {};\n  rule.walkDecls(decl => {\n    const before = decl.raws.before ? decl.raws.before.trim() : \"\";\n    object[before + decl.prop] = decl.value;\n  });\n  return object;\n};\n\nconst extractICSS = (css, removeRules = true) => {\n  const icssImports = {};\n  const icssExports = {};\n  css.each(node => {\n    if (node.type === \"rule\") {\n      if (node.selector.slice(0, 7) === \":import\") {\n        const matches = importPattern.exec(node.selector);\n\n        if (matches) {\n          const path = matches[1].replace(/'|\"/g, \"\");\n          icssImports[path] = Object.assign(icssImports[path] || {}, getDeclsObject(node));\n\n          if (removeRules) {\n            node.remove();\n          }\n        }\n      }\n\n      if (node.selector === \":export\") {\n        Object.assign(icssExports, getDeclsObject(node));\n\n        if (removeRules) {\n          node.remove();\n        }\n      }\n    }\n  });\n  return {\n    icssImports,\n    icssExports\n  };\n};\n\nvar _default = extractICSS;\nexports.default = _default;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst createImports = imports => {\n  return Object.keys(imports).map(path => {\n    const aliases = imports[path];\n    const declarations = Object.keys(aliases).map(key => _postcss.default.decl({\n      prop: key,\n      value: aliases[key],\n      raws: {\n        before: \"\\n  \"\n      }\n    }));\n    const hasDeclarations = declarations.length > 0;\n\n    const rule = _postcss.default.rule({\n      selector: `:import('${path}')`,\n      raws: {\n        after: hasDeclarations ? \"\\n\" : \"\"\n      }\n    });\n\n    if (hasDeclarations) {\n      rule.append(declarations);\n    }\n\n    return rule;\n  });\n};\n\nconst createExports = exports => {\n  const declarations = Object.keys(exports).map(key => _postcss.default.decl({\n    prop: key,\n    value: exports[key],\n    raws: {\n      before: \"\\n  \"\n    }\n  }));\n\n  if (declarations.length === 0) {\n    return [];\n  }\n\n  const rule = _postcss.default.rule({\n    selector: `:export`,\n    raws: {\n      after: \"\\n\"\n    }\n  }).append(declarations);\n\n  return [rule];\n};\n\nconst createICSSRules = (imports, exports) => [...createImports(imports), ...createExports(exports)];\n\nvar _default = createICSSRules;\nexports.default = _default;"]}