{"version":3,"sources":["trace-mapping.umd.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@jridgewell/sourcemap-codec'), require('@jridgewell/resolve-uri')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@jridgewell/sourcemap-codec', '@jridgewell/resolve-uri'], factory) :\n    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.traceMapping = {}, global.sourcemapCodec, global.resolveURI));\n})(this, (function (exports, sourcemapCodec, resolveUri) { \n\n    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n    var resolveUri__default = /*#__PURE__*/_interopDefaultLegacy(resolveUri);\n\n    function resolve(input, base) {\n        // The base is always treated as a directory, if it's not empty.\n        // https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327\n        // https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401\n        if (base && !base.endsWith('/'))\n            base += '/';\n        return resolveUri__default[\"default\"](input, base);\n    }\n\n    /**\n     * Removes everything after the last \"/\", but leaves the slash.\n     */\n    function stripFilename(path) {\n        if (!path)\n            return '';\n        const index = path.lastIndexOf('/');\n        return path.slice(0, index + 1);\n    }\n\n    function maybeSort(mappings, owned) {\n        const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);\n        if (unsortedIndex === mappings.length)\n            return mappings;\n        // If we own the array (meaning we parsed it from JSON), then we're free to directly mutate it. If\n        // not, we do not want to modify the consumer's input array.\n        if (!owned)\n            mappings = mappings.slice();\n        for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1)) {\n            mappings[i] = sortSegments(mappings[i], owned);\n        }\n        return mappings;\n    }\n    function nextUnsortedSegmentLine(mappings, start) {\n        for (let i = start; i < mappings.length; i++) {\n            if (!isSorted(mappings[i]))\n                return i;\n        }\n        return mappings.length;\n    }\n    function isSorted(line) {\n        for (let j = 1; j < line.length; j++) {\n            if (line[j][0] < line[j - 1][0]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    function sortSegments(line, owned) {\n        if (!owned)\n            line = line.slice();\n        return line.sort(sortComparator);\n    }\n    function sortComparator(a, b) {\n        return a[0] - b[0];\n    }\n\n    /**\n     * A binary search implementation that returns the index if a match is found.\n     * If no match is found, then the left-index (the index associated with the item that comes just\n     * before the desired index) is returned. To maintain proper sort order, a splice would happen at\n     * the next index:\n     *\n     * ```js\n     * const array = [1, 3];\n     * const needle = 2;\n     * const index = binarySearch(array, needle, (item, needle) => item - needle);\n     *\n     * assert.equal(index, 0);\n     * array.splice(index + 1, 0, needle);\n     * assert.deepEqual(array, [1, 2, 3]);\n     * ```\n     */\n    function binarySearch(haystack, needle, low, high) {\n        while (low <= high) {\n            const mid = low + ((high - low) >> 1);\n            const cmp = haystack[mid][0] - needle;\n            if (cmp === 0) {\n                return mid;\n            }\n            if (cmp < 0) {\n                low = mid + 1;\n            }\n            else {\n                high = mid - 1;\n            }\n        }\n        return low - 1;\n    }\n    function memoizedState() {\n        return {\n            lastKey: -1,\n            lastNeedle: -1,\n            lastIndex: -1,\n        };\n    }\n    /**\n     * This overly complicated beast is just to record the last tested line/column and the resulting\n     * index, allowing us to skip a few tests if mappings are monotonically increasing.\n     */\n    function memoizedBinarySearch(haystack, needle, state, key) {\n        const { lastKey, lastNeedle, lastIndex } = state;\n        let low = 0;\n        let high = haystack.length - 1;\n        if (key === lastKey) {\n            if (needle === lastNeedle) {\n                return lastIndex;\n            }\n            if (needle >= lastNeedle) {\n                // lastIndex may be -1 if the previous needle was not found.\n                low = Math.max(lastIndex, 0);\n            }\n            else {\n                high = lastIndex;\n            }\n        }\n        state.lastKey = key;\n        state.lastNeedle = needle;\n        return (state.lastIndex = binarySearch(haystack, needle, low, high));\n    }\n\n    const INVALID_MAPPING = Object.freeze({\n        source: null,\n        line: null,\n        column: null,\n        name: null,\n    });\n    /**\n     * Returns the encoded (VLQ string) form of the SourceMap's mappings field.\n     */\n    exports.encodedMappings = void 0;\n    /**\n     * Returns the decoded (array of lines of segments) form of the SourceMap's mappings field.\n     */\n    exports.decodedMappings = void 0;\n    /**\n     * A low-level API to find the segment associated with a generated line/column (think, from a\n     * stack trace). Line and column here are 0-based, unlike `originalPositionFor`.\n     */\n    exports.traceSegment = void 0;\n    /**\n     * A higher-level API to find the source/line/column associated with a generated line/column\n     * (think, from a stack trace). Line is 1-based, but column is 0-based, due to legacy behavior in\n     * `source-map` library.\n     */\n    exports.originalPositionFor = void 0;\n    /**\n     * Iterates each mapping in generated position order.\n     */\n    exports.eachMapping = void 0;\n    /**\n     * A helper that skips sorting of the input map's mappings array, which can be expensive for larger\n     * maps.\n     */\n    exports.presortedDecodedMap = void 0;\n    class TraceMap {\n        constructor(map, mapUrl) {\n            this._binarySearchMemo = memoizedState();\n            const isString = typeof map === 'string';\n            const parsed = isString ? JSON.parse(map) : map;\n            const { version, file, names, sourceRoot, sources, sourcesContent } = parsed;\n            this.version = version;\n            this.file = file;\n            this.names = names;\n            this.sourceRoot = sourceRoot;\n            this.sources = sources;\n            this.sourcesContent = sourcesContent;\n            if (sourceRoot || mapUrl) {\n                const from = resolve(sourceRoot || '', stripFilename(mapUrl));\n                this.resolvedSources = sources.map((s) => resolve(s || '', from));\n            }\n            else {\n                this.resolvedSources = sources.map((s) => s || '');\n            }\n            const { mappings } = parsed;\n            if (typeof mappings === 'string') {\n                this._encoded = mappings;\n                this._decoded = sourcemapCodec.decode(mappings);\n            }\n            else {\n                this._encoded = undefined;\n                this._decoded = maybeSort(mappings, isString);\n            }\n        }\n    }\n    (() => {\n        exports.encodedMappings = (map) => {\n            var _a;\n            return ((_a = map._encoded) !== null && _a !== void 0 ? _a : (map._encoded = sourcemapCodec.encode(map._decoded)));\n        };\n        exports.decodedMappings = (map) => {\n            return map._decoded;\n        };\n        exports.traceSegment = (map, line, column) => {\n            const decoded = map._decoded;\n            // It's common for parent source maps to have pointers to lines that have no\n            // mapping (like a \"//# sourceMappingURL=\") at the end of the child file.\n            if (line >= decoded.length)\n                return null;\n            const segments = decoded[line];\n            const index = memoizedBinarySearch(segments, column, map._binarySearchMemo, line);\n            // we come before any mapped segment\n            if (index < 0)\n                return null;\n            return segments[index];\n        };\n        exports.originalPositionFor = (map, { line, column }) => {\n            if (line < 1)\n                throw new Error('`line` must be greater than 0 (lines start at line 1)');\n            if (column < 0) {\n                throw new Error('`column` must be greater than or equal to 0 (columns start at column 0)');\n            }\n            const segment = exports.traceSegment(map, line - 1, column);\n            if (segment == null)\n                return INVALID_MAPPING;\n            if (segment.length == 1)\n                return INVALID_MAPPING;\n            const { names, resolvedSources } = map;\n            return {\n                source: resolvedSources[segment[1]],\n                line: segment[2] + 1,\n                column: segment[3],\n                name: segment.length === 5 ? names[segment[4]] : null,\n            };\n        };\n        exports.eachMapping = (map, cb) => {\n            const decoded = map._decoded;\n            const { names, resolvedSources } = map;\n            for (let i = 0; i < decoded.length; i++) {\n                const line = decoded[i];\n                for (let j = 0; j < line.length; j++) {\n                    const seg = line[j];\n                    const generatedLine = i + 1;\n                    const generatedColumn = seg[0];\n                    let source = null;\n                    let originalLine = null;\n                    let originalColumn = null;\n                    let name = null;\n                    if (seg.length !== 1) {\n                        source = resolvedSources[seg[1]];\n                        originalLine = seg[2] + 1;\n                        originalColumn = seg[3];\n                    }\n                    if (seg.length === 5)\n                        name = names[seg[4]];\n                    cb({\n                        generatedLine,\n                        generatedColumn,\n                        source,\n                        originalLine,\n                        originalColumn,\n                        name,\n                    });\n                }\n            }\n        };\n        exports.presortedDecodedMap = (map, mapUrl) => {\n            const clone = Object.assign({}, map);\n            clone.mappings = [];\n            const tracer = new TraceMap(clone, mapUrl);\n            tracer._decoded = map.mappings;\n            return tracer;\n        };\n    })();\n\n    exports.TraceMap = TraceMap;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=trace-mapping.umd.js.map\n"]}